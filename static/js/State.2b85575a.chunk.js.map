{"version":3,"sources":["components/footer.js","components/tooltips.js","components/level.js","components/minigraph.js","components/legend.js","components/choropleth.js","components/mapexplorer.js","components/timeseries.js","utils/hooks.js","components/timeseriesexplorer.js","components/clusters.js","components/deltabargraph.js","components/statemetacard.js","components/statemeta.js","components/state.js"],"names":["React","memo","props","t","useTranslation","className","style","animationDelay","href","target","rel","justifyContent","testedToolTip","onClick","e","stopPropagation","data-for","data-tip","data-event","data-event-off","id","place","type","effect","multiline","scrollHide","globalEventOff","useState","data","setData","useEffectOnce","active","confirmed","recovered","deaths","deltaconfirmed","deltadeaths","deltarecovered","isNaN","formatNumber","timeseries","timeSeriesData","setTimeSeriesData","svgRef1","useRef","svgRef2","svgRef3","svgRef4","useEffect","slice","length","graphData","useCallback","margin","chartRight","chartBottom","svg1","d3","current","svg2","svg3","svg4","forEach","d","dailyconfirmed","dailyrecovered","dailydeceased","xScale","domain","date","range","svgArray","dataTypes","colors","dailyMin","dailyactive","dailyMax","Math","max","domainMinMax","yScale","svg","i","color","path","append","datum","attr","x","y","curve","totalLength","node","getTotalLength","transition","delay","duration","selectAll","enter","on","ref","width","height","viewBox","preserveAspectRatio","ramp","n","canvas","context","getContext","fillStyle","fillRect","legend","title","tickSize","marginTop","marginRight","marginBottom","marginLeft","ticks","tickFormat","tickValues","ordinalWeights","tickAdjust","g","interpolate","min","copy","rangeRound","select","toDataURL","interpolator","Object","assign","undefined","round","map","invertExtent","thresholds","quantiles","thresholdFormat","join","widthScale","reduce","a","b","xPos","w","acc","bandwidth","call","remove","text","ChoroplethMap","statistic","mapData","currentMap","changeMap","regionHighlighted","setRegionHighlighted","isCountryLoaded","mapOption","choroplethMap","choroplethLegend","mapMeta","MAP_META","name","ready","geoData","topologyStates","mapType","MAP_TYPES","COUNTRY","topojson","objects","graphObjectStates","features","topologyDistricts","view","MAP_VIEWS","DISTRICTS","graphObjectDistricts","topology","STATES","projection","widthStyle","parseInt","fitWidth","heightStyle","fitSize","bBox","bounds","split","colorScale","svgLegend","widthLegend","heightLegend","stat","MAP_STATISTICS","ZONE","values","clamp","capitalizeAll","PER_MILLION","TOTAL","Number","isInteger","featureStates","f","state","properties","st_nm","obj","featureDistricts","district","onceTouchedRegion","regionSelection","sel","isHovered","this","classed","region","STATE","parseFloat","total","toFixed","toString","parentNode","appendChild","meshStates","meshDistricts","geoDataFile","paths","nodes","highlightRegionInMap","Fragment","Unknown","position","colorInterpolationFilters","getRegionFromState","mapName","states","districts","zones","stateTestData","anchor","setAnchor","setMapOption","setCurrentMap","currentMapMeta","useMemo","currentMapData","dtype","keys","acc1","acc2","zone","typeCount","STATE_POPULATIONS","districtWiseData","districtData","Total","find","getRegionFromDistrict","hoveredRegion","panelRegion","hoveredRegionCount","hoveredRegionZone","switchMapToState","newMapMeta","topDistrict","filter","sort","ReactDOM","unstable_batchedUpdates","testObj","totaltested","display","window","innerWidth","action","parse","updatedon","Date","formatDayMonth","source","lastupdatedtime","formatDate","formatLastUpdated","to","STATE_CODES_REVERSE","prevProps","currProps","equal","timeseriesProp","chartType","mode","logMode","stateCode","Infinity","lastDaysCount","setLastDaysCount","setTimeseries","datapoint","setDatapoint","index","setIndex","moving","setMoving","svgRef5","wrapperRef","dimensions","setDimensions","observeTarget","resizeObserver","ResizeObserver","entries","observer","entry","contentRect","observe","unobserve","useResizeObserver","transformTimeSeries","slicedTimeseries","sliceTimeseriesFromEnd","T","yScales","svg5","dateMin","subDays","dateMax","addDays","numTicksX","xAxis","tick","formatTimeseriesTickX","xAxis2","yAxis","tickPadding","plotTotal","dataTypesTotal","dataTypesDaily","uniformScaleMin","totalactive","totalrecovered","totaldeceased","uniformScaleMax","totalconfirmed","yScaleUniformLinear","nice","yScaleUniformLog","yScaleLinear","yScaleLog","yScaleDailyUniform","focus","typeTotal","typeDaily","filteredTimeseries","reverse","p","getPointAtLength","repeat","mousemove","mouseout","xm","invert","bisectDate","left","j","dateStr","formatTimeseriesDate","chartKey1","chartKey2","chartKey3","chartKey4","chartKey5","currentStatusCount","currentDiff","formatedDiff","aria-label","isIntersecting","activeStateCode","onHighlightState","useLocalStorage","setChartType","isTimeseriesIntersecting","setIsTimeseriesIntersecting","timeseriesMode","setTimeseriesMode","timeseriesLogMode","setTimeseriesLogMode","options","rootMargin","onChange","htmlFor","checked","event","disabled","value","selectedState","selectedOptions","getAttribute","JSON","s","statecode","key","statedata","stringify","isTotal","fetched","setFetched","stateRawData","setStateRawData","networkData","setNetworkData","axios","get","rawDataResponse","raw_data","console","log","getData","contractedStr","v","contractedfromwhichpatientsuspected","replace","sources","Set","match","nodesSet","links","contracted","pid","patientnumber","add","push","group","has","raw","prepareNetworkData","NetworkGraph","fgRef","fg","document","getElementById","offsetWidth","d3Force","strength","currNode","nodeLabel","nodeColor","linkDirectionalParticleColor","linkDirectionalParticles","linkDirectionalParticleWidth","link","enableZoomPanInteraction","render","arrayKey","svgRef","formatTime","paddingInner","h","r","sign","abs","roundedBar","StateMetaCard","formula","description","StateMeta","stateData","lastTestObject","population","lastSevenDaysData","totalData","sevenDayBeforeData","sevenDayBeforeDate","format","previousDayData","previousDayDate","confirmedPerMillion","recoveryPercent","activePercent","deathPercent","testPerMillion","growthRate","totalConfirmedPerMillion","updatedDate","Breadcrumbs","stateName","allStateData","Item","direction","selected","Caret","Menu","STATE_CODES","useParams","toUpperCase","setAllStateData","districtZones","setDistrictZones","setStateData","testData","setTestData","setSources","setDistrictData","useMeasure","mapSwitcher","showAllDistricts","setShowAllDistricts","getState","code","Promise","all","dataResponse","stateDistrictWiseResponse","statesDailyResponse","stateTestResponse","sourcesResponse","zonesResponse","statewise","ts","parseStateTimeseries","testTs","parseStateTestTimeseries","states_tested_data","tsMerged","mergeTimeseries","sourceList","sources_list","statesTests","parseDistrictZones","anime","targets","translateX","easing","opacity","testObjLast","gridRowCount","gridColumnCount","districtCount","ceil","getGridRowCount","Helmet","content","formatDateAbsolute","transform","num","gridTemplateRows","districtB","districtA","cases","delta","every","day"],"mappings":"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","file":"static/js/State.2b85575a.chunk.js","sourcesContent":["import React from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\n\nfunction Footer(props) {\n  const {t} = useTranslation();\n\n  return (\n    <footer className=\"fadeInUp\" style={{animationDelay: '2s'}}>\n      <h5>{t('We stand with everyone fighting on the frontlines')}</h5>\n\n      <div className=\"link\">\n        <a\n          href=\"https://github.com/covid19india\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          covid19india\n        </a>\n      </div>\n\n      <a\n        href=\"https://github.com/covid19india/covid19india-react\"\n        className=\"button github\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icon.GitHub />\n        <span>{t('Open Sourced on GitHub')}</span>\n      </a>\n\n      <a\n        className=\"button excel\"\n        href=\"http://patientdb.covid19india.org\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icon.Database />\n        <span>{t('Crowdsourced Patient Database')}</span>\n      </a>\n\n      <a\n        href=\"https://twitter.com/covid19indiaorg\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"button twitter\"\n        style={{justifyContent: 'center'}}\n      >\n        <Icon.Twitter />\n        <span>{t('View updates on Twitter')}</span>\n      </a>\n\n      <a\n        href=\"https://bit.ly/covid19crowd\"\n        className=\"button telegram\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <Icon.MessageCircle />\n        <span>{t('Join Telegram to Collaborate!')}</span>\n      </a>\n    </footer>\n  );\n}\n\nexport default React.memo(Footer);\n","import React from 'react';\nimport * as Icon from 'react-feather';\nimport ReactTooltip from 'react-tooltip';\n\nexport const testedToolTip = (\n  <span className=\"tooltip-tested\" onClick={(e) => e.stopPropagation()}>\n    <Icon.Info\n      data-for=\"tested\"\n      data-tip=\"Reporting total samples tested from ICMR data\"\n      data-event=\"touchstart mouseover\"\n      data-event-off=\"mouseleave\"\n    />\n    <ReactTooltip\n      id=\"tested\"\n      place=\"top\"\n      type=\"dark\"\n      effect=\"solid\"\n      multiline={true}\n      scrollHide={true}\n      globalEventOff=\"click\"\n    />\n  </span>\n);\n","import {formatNumber} from '../utils/commonfunctions';\n\nimport React, {useState} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useEffectOnce} from 'react-use';\n\nfunction Level(props) {\n  const [data, setData] = useState(props.data);\n  const {t} = useTranslation();\n\n  useEffectOnce(() => {\n    setData({\n      active: +props.data.active,\n      confirmed: +props.data.confirmed,\n      recovered: +props.data.recovered,\n      deaths: +props.data.deaths,\n      deltaconfirmed: +props.data.deltaconfirmed,\n      deltadeaths: +props.data.deltadeaths,\n      deltarecovered: +props.data.deltarecovered,\n    });\n  });\n\n  return (\n    <div className=\"Level\">\n      <div\n        className=\"level-item is-cherry fadeInUp\"\n        style={{animationDelay: '1s'}}\n      >\n        <h5>{t('Confirmed')}</h5>\n        <h4>\n          [\n          {isNaN(data.deltaconfirmed)\n            ? ''\n            : data.deltaconfirmed > 0\n            ? '+' + formatNumber(data.deltaconfirmed)\n            : '+0'}\n          ]\n        </h4>\n        <h1>{formatNumber(data.confirmed)} </h1>\n      </div>\n\n      <div\n        className=\"level-item is-blue fadeInUp\"\n        style={{animationDelay: '1.1s'}}\n      >\n        <h5 className=\"heading\">{t('Active')}</h5>\n        <h4>&nbsp;</h4>\n        <h1 className=\"title has-text-info\">{formatNumber(data.active)}</h1>\n      </div>\n\n      <div\n        className=\"level-item is-green fadeInUp\"\n        style={{animationDelay: '1.2s'}}\n      >\n        <h5 className=\"heading\">{t('Recovered')}</h5>\n        <h4>\n          [\n          {isNaN(data.deltarecovered)\n            ? ''\n            : data.deltarecovered > 0\n            ? '+' + formatNumber(data.deltarecovered)\n            : '+0'}\n          ]\n        </h4>\n        <h1 className=\"title has-text-success\">\n          {formatNumber(data.recovered)}{' '}\n        </h1>\n      </div>\n\n      <div\n        className=\"level-item is-gray fadeInUp\"\n        style={{animationDelay: '1.3s'}}\n      >\n        <h5 className=\"heading\">{t('Deceased')}</h5>\n        <h4>\n          [\n          {isNaN(data.deltadeaths)\n            ? ''\n            : data.deltadeaths > 0\n            ? '+' + formatNumber(data.deltadeaths)\n            : '+0'}\n          ]\n        </h4>\n        <h1 className=\"title has-text-grey\">{formatNumber(data.deaths)}</h1>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(Level);\n","import * as d3 from 'd3';\nimport React, {useState, useEffect, useRef, useCallback} from 'react';\n\nfunction Minigraph({timeseries}) {\n  const [timeSeriesData, setTimeSeriesData] = useState([]);\n  const svgRef1 = useRef();\n  const svgRef2 = useRef();\n  const svgRef3 = useRef();\n  const svgRef4 = useRef();\n\n  useEffect(() => {\n    setTimeSeriesData(timeseries.slice(timeseries.length - 20));\n  }, [timeseries]);\n\n  const graphData = useCallback((data) => {\n    if (data.length <= 1) return 0;\n\n    const margin = {top: 10, right: 5, bottom: 20, left: 5};\n    const chartRight = 100 - margin.right;\n    const chartBottom = 100 - margin.bottom;\n\n    const svg1 = d3.select(svgRef1.current);\n    const svg2 = d3.select(svgRef2.current);\n    const svg3 = d3.select(svgRef3.current);\n    const svg4 = d3.select(svgRef4.current);\n\n    data.forEach((d) => {\n      d['dailyactive'] = d.dailyconfirmed - d.dailyrecovered - d.dailydeceased;\n    });\n\n    const xScale = d3\n      .scaleTime()\n      .domain(d3.extent(data, (d) => d.date))\n      .range([margin.left, chartRight]);\n\n    const svgArray = [svg1, svg2, svg3, svg4];\n    const dataTypes = [\n      'dailyconfirmed',\n      'dailyactive',\n      'dailyrecovered',\n      'dailydeceased',\n    ];\n    const colors = ['#ff073a', '#007bff', '#28a745', '#6c757d'];\n\n    const dailyMin = d3.min(data, (d) => d.dailyactive);\n    const dailyMax = d3.max(data, (d) =>\n      Math.max(d.dailyconfirmed, d.dailyrecovered, d.dailydeceased)\n    );\n    const domainMinMax = Math.max(-dailyMin, dailyMax);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([-domainMinMax, domainMinMax])\n      .range([chartBottom, margin.top]);\n\n    svgArray.forEach((svg, i) => {\n      const type = dataTypes[i];\n      const color = colors[i];\n\n      const path = svg\n        .append('path')\n        .datum(data)\n        .attr('fill', 'none')\n        .attr('stroke', color + '99')\n        .attr('stroke-width', 2.5)\n        .attr('cursor', 'pointer')\n        .attr(\n          'd',\n          d3\n            .line()\n            .x((d) => xScale(d.date))\n            .y((d) => yScale(d[type]))\n            .curve(d3.curveCardinal)\n        );\n\n      const totalLength = path.node().getTotalLength();\n      path\n        .attr('stroke-dasharray', totalLength + ' ' + totalLength)\n        .attr('stroke-dashoffset', totalLength)\n        .transition()\n        .delay(500)\n        .duration(2500)\n        .attr('stroke-dashoffset', 0);\n\n      svg\n        .selectAll('.dot')\n        .data(data.slice(data.length - 1))\n        .enter()\n        .append('circle')\n        .attr('fill', color)\n        .attr('stroke', color)\n        .attr('r', 2)\n        .attr('cursor', 'pointer')\n        .attr('cx', (d) => xScale(d.date))\n        .attr('cy', (d) => yScale(d[type]))\n        .on('mouseover', (d) => {\n          d3.select(d3.event.target).attr('r', '5');\n        })\n        .on('mouseout', (d) => {\n          d3.select(d3.event.target).attr('r', '2');\n        })\n        .style('opacity', 0)\n        .transition()\n        .delay(500)\n        .duration(2500)\n        .style('opacity', 1);\n    });\n  }, []);\n\n  useEffect(() => {\n    graphData(timeSeriesData);\n  }, [timeSeriesData, graphData]);\n\n  return (\n    <div className=\"Minigraph\">\n      <div className=\"svg-parent fadeInUp\" style={{animationDelay: '1.4s'}}>\n        <svg\n          ref={svgRef1}\n          width=\"100\"\n          height=\"75\"\n          viewBox=\"0 0 100 75\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        />\n      </div>\n\n      <div\n        className=\"svg-parent is-blue fadeInUp\"\n        style={{animationDelay: '1.5s'}}\n      >\n        <svg\n          ref={svgRef2}\n          width=\"100\"\n          height=\"75\"\n          viewBox=\"0 0 100 75\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        />\n      </div>\n\n      <div\n        className=\"svg-parent is-green fadeInUp\"\n        style={{animationDelay: '1.6s'}}\n      >\n        <svg\n          ref={svgRef3}\n          width=\"100\"\n          height=\"75\"\n          viewBox=\"0 0 100 75\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        />\n      </div>\n\n      <div\n        className=\"svg-parent is-gray fadeInUp\"\n        style={{animationDelay: '1.7s'}}\n      >\n        <svg\n          ref={svgRef4}\n          width=\"100\"\n          height=\"75\"\n          viewBox=\"0 0 100 75\"\n          preserveAspectRatio=\"xMidYMid meet\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(Minigraph);\n","/* Source: https://observablehq.com/@d3/color-legend */\n\nimport * as d3 from 'd3';\n\nfunction legend({\n  color,\n  title,\n  tickSize = 6,\n  width = 320,\n  height = 44 + tickSize,\n  marginTop = 18,\n  marginRight = 0,\n  marginBottom = 16 + tickSize,\n  marginLeft = 0,\n  svg,\n  ticks = width / 64,\n  tickFormat,\n  tickValues,\n  ordinalWeights,\n} = {}) {\n  if (!svg)\n    svg = d3\n      .create('svg')\n      .attr('width', width)\n      .attr('height', height)\n      .attr('viewBox', [0, 0, width, height])\n      .style('overflow', 'visible')\n      .style('display', 'block');\n\n  const t = svg.transition().duration(500);\n\n  let tickAdjust = (g) => {\n    const ticks = g.selectAll('.tick line');\n    ticks.attr('y1', marginTop + marginBottom - height);\n    // d3.select(ticks.nodes()[ticks.size() - 1]).remove();\n  };\n  let x;\n\n  // Continuous\n  if (color.interpolate) {\n    const n = Math.min(color.domain().length, color.range().length);\n\n    x = color\n      .copy()\n      .rangeRound(\n        d3.quantize(d3.interpolate(marginLeft, width - marginRight), n)\n      );\n\n    svg\n      .select('.ramp')\n      .attr('class', 'ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr(\n        'xlink:href',\n        ramp(\n          color.copy().domain(d3.quantize(d3.interpolate(0, 1), n))\n        ).toDataURL()\n      );\n  }\n\n  // Sequential\n  else if (color.interpolator) {\n    svg.selectAll('rect').transition(t).attr('opacity', 0);\n\n    x = Object.assign(\n      color\n        .copy()\n        .interpolator(d3.interpolateRound(marginLeft, width - marginRight)),\n      {\n        range() {\n          return [marginLeft, width - marginRight];\n        },\n      }\n    );\n\n    svg\n      .select('.ramp')\n      .attr('class', 'ramp')\n      .attr('x', marginLeft)\n      .attr('y', marginTop)\n      .attr('width', width - marginLeft - marginRight)\n      .attr('height', height - marginTop - marginBottom)\n      .attr('preserveAspectRatio', 'none')\n      .attr('xlink:href', ramp(color.interpolator()).toDataURL())\n      .transition(t)\n      .attr('opacity', 1);\n\n    // scaleSequentialQuantile doesn’t implement ticks or tickFormat.\n    if (!x.ticks) {\n      if (tickValues === undefined) {\n        const n = Math.round(ticks + 1);\n        tickValues = d3\n          .range(n)\n          .map((i) => d3.quantile(color.domain(), i / (n - 1)));\n      }\n      if (typeof tickFormat !== 'function') {\n        tickFormat = d3.format(tickFormat === undefined ? ',f' : tickFormat);\n      }\n    }\n  }\n\n  // Threshold\n  else if (color.invertExtent) {\n    const thresholds = color.thresholds\n      ? color.thresholds() // scaleQuantize\n      : color.quantiles\n      ? color.quantiles() // scaleQuantile\n      : color.domain(); // scaleThreshold\n\n    const thresholdFormat =\n      tickFormat === undefined\n        ? (d) => d\n        : typeof tickFormat === 'string'\n        ? d3.format(tickFormat)\n        : tickFormat;\n\n    x = d3\n      .scaleLinear()\n      .domain([-1, color.range().length - 1])\n      .rangeRound([marginLeft, width - marginRight]);\n\n    svg\n      .append('g')\n      .selectAll('rect')\n      .data(color.range())\n      .join('rect')\n      .attr('x', (d, i) => x(i - 1))\n      .attr('y', marginTop)\n      .attr('width', (d, i) => x(i) - x(i - 1))\n      .attr('height', height - marginTop - marginBottom)\n      .attr('fill', (d) => d);\n\n    tickValues = d3.range(-1, thresholds.length);\n    tickFormat = (i) => {\n      if (i === -1) return thresholdFormat(1);\n      else if (i === thresholds.length - 1) return;\n      else if (i === thresholds.length - 2)\n        return thresholdFormat(thresholds[i] + '+', i);\n      return thresholdFormat(thresholds[i], i);\n    };\n  }\n\n  // Ordinal\n  else {\n    svg\n      .select('.ramp')\n      .transition(t)\n      .attr('opacity', 0)\n      .attr('xlink:href', null);\n    if (!ordinalWeights) {\n      x = d3\n        .scaleBand()\n        .domain(color.domain())\n        .rangeRound([marginLeft, width - marginRight]);\n      svg\n        .selectAll('rect')\n        .data(color.domain())\n        .join('rect')\n        .attr('x', x)\n        .attr('y', marginTop)\n        .attr('width', Math.max(0, x.bandwidth() - 1))\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color);\n    } else {\n      const widthScale = d3\n        .scaleLinear()\n        .domain([0, ordinalWeights.reduce((a, b) => a + b)])\n        .rangeRound([0, width - marginLeft - marginRight]);\n\n      const xPos = ordinalWeights.map((w, i) =>\n        ordinalWeights\n          .slice(0, i)\n          .reduce((acc, w) => acc + widthScale(w), marginLeft)\n      );\n\n      x = d3.scaleOrdinal().domain(color.domain()).range(xPos);\n\n      svg\n        .selectAll('rect')\n        .data(color.domain())\n        .join((enter) =>\n          enter\n            .append('rect')\n            .attr('x', x)\n            .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        )\n        .attr('y', marginTop)\n        .attr('height', height - marginTop - marginBottom)\n        .attr('fill', color)\n        .transition(t)\n        .attr('x', x)\n        .attr('width', (d, i) => widthScale(ordinalWeights[i]))\n        .attr('opacity', 1);\n    }\n\n    tickAdjust = () => {};\n  }\n\n  svg\n    .select('.axis')\n    .attr('transform', `translate(0,${height - marginBottom})`)\n    .transition(t)\n    .attr('class', 'axis')\n    .call(\n      d3\n        .axisBottom(x)\n        .ticks(ticks, typeof tickFormat === 'string' ? tickFormat : undefined)\n        .tickFormat(typeof tickFormat === 'function' ? tickFormat : undefined)\n        .tickSize(tickSize)\n        .tickValues(tickValues)\n    )\n    .on('start', () => {\n      svg.call(tickAdjust).call((svg) => svg.select('.domain').remove());\n    })\n    .call((g) =>\n      g\n        .select('.axistext')\n        .attr('class', 'axistext')\n        .attr('x', marginLeft)\n        .attr('y', marginTop + marginBottom - height - 6)\n        .attr('fill', 'currentColor')\n        .attr('text-anchor', 'start')\n        .attr('font-weight', 'bold')\n        .text(title)\n    );\n\n  return svg.node();\n}\n\nfunction ramp(color, n = 256) {\n  // const canvas = document.createElement('canvas');\n  const canvas = d3.select('.color-scale').node();\n  const context = ((canvas.width = n), (canvas.height = 1), canvas).getContext(\n    '2d'\n  );\n  for (let i = 0; i < n; ++i) {\n    context.fillStyle = color(i / (n - 1));\n    context.fillRect(i, 0, 1, 1);\n  }\n  return canvas;\n}\n\nexport default legend;\n","import legend from './legend';\n\nimport {MAP_META, MAP_STATISTICS, MAP_TYPES, MAP_VIEWS} from '../constants';\nimport {capitalizeAll, formatNumber} from '../utils/commonfunctions';\n\nimport * as d3 from 'd3';\nimport React, {useCallback, useEffect, useRef} from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport * as topojson from 'topojson';\n\nfunction ChoroplethMap({\n  statistic,\n  mapData,\n  currentMap,\n  changeMap,\n  regionHighlighted,\n  setRegionHighlighted,\n  isCountryLoaded,\n  mapOption,\n}) {\n  const choroplethMap = useRef(null);\n  const choroplethLegend = useRef(null);\n  const {t} = useTranslation();\n  const mapMeta = MAP_META[currentMap.name];\n\n  const ready = useCallback(\n    (geoData) => {\n      const svg = d3.select(choroplethMap.current);\n\n      const topologyStates =\n        mapMeta.mapType === MAP_TYPES.COUNTRY\n          ? topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectStates]\n            )\n          : {features: []};\n      const topologyDistricts =\n        currentMap.view === MAP_VIEWS.DISTRICTS\n          ? topojson.feature(\n              geoData,\n              geoData.objects[mapMeta.graphObjectDistricts]\n            )\n          : {features: []};\n\n      const topology =\n        currentMap.view === MAP_VIEWS.STATES\n          ? topologyStates\n          : topologyDistricts;\n\n      const projection = d3.geoMercator();\n\n      // Set size of the map\n      let path;\n      let width;\n      let height;\n      if (!svg.attr('viewBox')) {\n        const widthStyle = parseInt(svg.style('width'));\n        if (isCountryLoaded) projection.fitWidth(widthStyle, topology);\n        else {\n          const heightStyle = parseInt(svg.style('height'));\n          projection.fitSize([widthStyle, heightStyle], topology);\n        }\n        path = d3.geoPath(projection);\n        const bBox = path.bounds(topology);\n        width = +bBox[1][0];\n        height = +bBox[1][1];\n        svg.attr('viewBox', `0 0 ${width} ${height}`);\n      }\n      const bBox = svg.attr('viewBox').split(' ');\n      width = +bBox[2];\n      height = +bBox[3];\n      projection.fitSize([width, height], topology);\n      path = d3.geoPath(projection);\n\n      /* Legend */\n      const svgLegend = d3.select(choroplethLegend.current);\n      const widthLegend = parseInt(svgLegend.style('width'));\n      const heightLegend = +svgLegend.attr('height');\n      svgLegend.attr('viewBox', `0 0 ${widthLegend} ${heightLegend}`);\n\n      // Colorbar\n      let colorScale;\n      if (currentMap.stat === MAP_STATISTICS.ZONE) {\n        colorScale = d3.scaleOrdinal(\n          ['Red', 'Orange', 'Green'],\n          ['#d73027', '#fee08b', '#66bd63']\n        );\n\n        svgLegend.call(() =>\n          legend({\n            color: colorScale,\n            width: widthLegend,\n            height: heightLegend,\n            tickValues: [],\n            marginLeft: 2,\n            marginRight: 20,\n            svg: svgLegend,\n            ordinalWeights: Object.values(statistic),\n          })\n        );\n      } else {\n        const colorInterpolator = (t) => {\n          switch (mapOption) {\n            case 'confirmed':\n              return d3.interpolateReds(t * 0.85);\n            case 'active':\n              return d3.interpolateBlues(t * 0.85);\n            case 'recovered':\n              return d3.interpolateGreens(t * 0.85);\n            case 'deceased':\n              return d3.interpolateGreys(t * 0.85);\n            default:\n              return;\n          }\n        };\n        colorScale = d3\n          .scaleSequential(\n            [0, Math.max(1, statistic[mapOption].max)],\n            colorInterpolator\n          )\n          .clamp(true);\n        svgLegend.call(() =>\n          legend({\n            color: colorScale,\n            title:\n              capitalizeAll(mapOption) +\n              (currentMap.stat === MAP_STATISTICS.PER_MILLION\n                ? ' cases per million'\n                : ' cases'),\n            width: widthLegend,\n            height: heightLegend,\n            ticks: 6,\n            tickFormat: function (d, i, n) {\n              if (\n                currentMap.stat === MAP_STATISTICS.TOTAL &&\n                !Number.isInteger(d)\n              )\n                return;\n              if (i === n.length - 1) return formatNumber(d) + '+';\n              return formatNumber(d);\n            },\n            marginLeft: 2,\n            marginRight: 20,\n            svg: svgLegend,\n          })\n        );\n      }\n      svgLegend.attr(\n        'class',\n        currentMap.stat === MAP_STATISTICS.ZONE ? 'zone' : ''\n      );\n\n      // Add id to each feature\n      const featureStates = topologyStates.features.map((f) => {\n        const state = f.properties.st_nm;\n        const obj = Object.assign({}, f);\n        obj.id = `${mapMeta.graphObjectStates}-${state}`;\n        return obj;\n      });\n\n      // Add id to each feature\n      const featureDistricts = topologyDistricts.features.map((f) => {\n        const district = f.properties.district;\n        const state = f.properties.st_nm;\n        const obj = Object.assign({}, f);\n        obj.id = `${mapMeta.graphObjectDistricts}-${state}${district}`;\n        return obj;\n      });\n\n      /* Draw map */\n      const t = svg.transition().duration(500);\n      let onceTouchedRegion = null;\n      const regionSelection = svg\n        .select(currentMap.view === MAP_VIEWS.STATES ? '.states' : '.districts')\n        .selectAll('path')\n        .data(\n          currentMap.view === MAP_VIEWS.STATES\n            ? featureStates\n            : featureDistricts,\n          (d) => d.id\n        )\n        .join((enter) => {\n          const sel = enter.append('path').attr('d', path);\n          sel.append('title');\n          return sel;\n        })\n        .attr('class', function (d) {\n          const isHovered = d3.select(this).classed('map-hover');\n          return `path-region ${mapOption} ${isHovered ? 'map-hover' : ''}`;\n        })\n        .style('cursor', 'pointer')\n        .on('mouseenter', function (d) {\n          const region = {state: d.properties.st_nm};\n          if (d.properties.district) region.district = d.properties.district;\n          setRegionHighlighted(region);\n        })\n        .on('mouseleave', (d) => {\n          if (onceTouchedRegion === d) onceTouchedRegion = null;\n        })\n        .on('touchstart', (d) => {\n          if (onceTouchedRegion === d) onceTouchedRegion = null;\n          else onceTouchedRegion = d;\n        })\n        .on('click', handleClick)\n        .attr('pointer-events', 'none');\n\n      regionSelection.select('title').text(function (d) {\n        if (currentMap.stat === MAP_STATISTICS.TOTAL) {\n          const state = d.properties.st_nm;\n          const district = d.properties.district;\n          let n;\n          if (district)\n            n =\n              mapData[state] && mapData[state][district]\n                ? mapData[state][district][mapOption]\n                : 0;\n          else n = mapData[state] ? mapData[state][mapOption] : 0;\n          return (\n            Number(\n              parseFloat(\n                100 * (n / (statistic[mapOption].total || 0.001))\n              ).toFixed(2)\n            ).toString() +\n            '% from ' +\n            capitalizeAll(district ? district : state)\n          );\n        }\n      });\n\n      regionSelection\n        .transition(t)\n        .attr('fill', function (d) {\n          let n;\n          if (currentMap.stat === MAP_STATISTICS.ZONE) {\n            const state = d.properties.st_nm;\n            const district = d.properties.district;\n            n =\n              mapData[state] && mapData[state][district]\n                ? mapData[state][district]\n                : 0;\n          } else {\n            const state = d.properties.st_nm;\n            const district = d.properties.district;\n            if (district)\n              n =\n                mapData[state] &&\n                mapData[state][district] &&\n                mapData[state][district][mapOption]\n                  ? mapData[state][district][mapOption]\n                  : 0;\n            else\n              n =\n                mapData[state] && mapData[state][mapOption]\n                  ? mapData[state][mapOption]\n                  : 0;\n          }\n          const color = n === 0 ? '#ffffff00' : colorScale(n);\n          return color;\n        })\n        .attr('stroke', function () {\n          const isHovered = d3.select(this).classed('map-hover');\n          if (isHovered) this.parentNode.appendChild(this);\n          if (currentMap.stat === MAP_STATISTICS.ZONE) {\n            return isHovered ? '#343a40' : null;\n          } else {\n            return isHovered\n              ? `${\n                  mapOption === 'confirmed'\n                    ? '#ff073a'\n                    : mapOption === 'active'\n                    ? '#007bff'\n                    : mapOption === 'recovered'\n                    ? '#28a745'\n                    : mapOption === 'deceased'\n                    ? '#6c757d'\n                    : ''\n                }`\n              : null;\n          }\n        })\n        .transition()\n        .attr('pointer-events', 'all');\n\n      svg\n        .transition()\n        .duration(mapMeta.mapType === MAP_TYPES.STATE ? 250 : 0)\n        .on('end', () =>\n          svg.attr(\n            'class',\n            currentMap.stat === MAP_STATISTICS.ZONE ? 'zone' : ''\n          )\n        );\n\n      let meshStates = [];\n      if (mapMeta.mapType === MAP_TYPES.COUNTRY) {\n        meshStates = [\n          topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectStates]),\n        ];\n        meshStates[0].id = mapMeta.graphObjectStates;\n      }\n      let meshDistricts = [];\n      if (currentMap.view === MAP_VIEWS.DISTRICTS) {\n        // Add id to mesh\n        meshDistricts = [\n          topojson.mesh(geoData, geoData.objects[mapMeta.graphObjectDistricts]),\n        ];\n        meshDistricts[0].id = mapMeta.graphObjectDistricts;\n      }\n      svg\n        .select(\n          currentMap.view === MAP_VIEWS.STATES\n            ? '.state-borders'\n            : '.district-borders'\n        )\n        .selectAll('path')\n        .data(\n          currentMap.view === MAP_VIEWS.STATES ? meshStates : meshDistricts,\n          (d) => d.id\n        )\n        .join((enter) =>\n          enter\n            .append('path')\n            .attr('d', path)\n            .attr('stroke-width', width / 250)\n        )\n        .attr('fill', 'none')\n        .transition(t)\n        .attr('stroke-width', function () {\n          return mapMeta.mapType === MAP_TYPES.COUNTRY &&\n            currentMap.view === MAP_VIEWS.DISTRICTS\n            ? 0\n            : width / 250;\n        })\n        .attr('stroke', function () {\n          if (currentMap.stat === MAP_STATISTICS.ZONE) {\n            return '#00000060';\n          } else {\n            return `${\n              mapOption === 'confirmed'\n                ? '#ff073a30'\n                : mapOption === 'active'\n                ? '#007bff30'\n                : mapOption === 'recovered'\n                ? '#28a74530'\n                : mapOption === 'deceased'\n                ? '#6c757d30'\n                : ''\n            }`;\n          }\n        });\n\n      svg\n        .select(currentMap.view === MAP_VIEWS.STATES ? '.districts' : '.states')\n        .selectAll('path')\n        .data(\n          currentMap.view === MAP_VIEWS.STATES\n            ? featureDistricts\n            : featureStates,\n          (d) => d.id\n        )\n        .join((enter) => enter.append('path').attr('d', path))\n        .attr('class', 'path-region')\n        .attr('fill', 'none')\n        .attr('stroke', 'none')\n        .attr('pointer-events', 'none');\n\n      svg\n        .select(\n          currentMap.view === MAP_VIEWS.STATES\n            ? '.district-borders'\n            : '.state-borders'\n        )\n        .selectAll('path')\n        .data(\n          currentMap.view === MAP_VIEWS.STATES ? meshDistricts : meshStates,\n          (d) => d.id\n        )\n        .join((enter) => enter.append('path').attr('d', path))\n        .attr('fill', 'none')\n        .transition(t)\n        .attr('stroke-width', width / 250)\n        .attr('stroke', '#343a4099');\n\n      function handleClick(d) {\n        d3.event.stopPropagation();\n        if (onceTouchedRegion || mapMeta.mapType === MAP_TYPES.STATE) return;\n        // Disable pointer events till the new map is rendered\n        svg.attr('pointer-events', 'none');\n        svg.selectAll('.path-region').attr('pointer-events', 'none');\n        // Switch map\n        changeMap(d.properties.st_nm);\n      }\n\n      // Reset on tapping outside map\n      svg.attr('pointer-events', 'auto').on('click', () => {\n        if (mapMeta.mapType !== MAP_TYPES.STATE) {\n          setRegionHighlighted({\n            state: 'Total',\n          });\n        }\n      });\n    },\n    [\n      mapMeta,\n      currentMap.stat,\n      currentMap.view,\n      statistic,\n      mapOption,\n      isCountryLoaded,\n      mapData,\n      setRegionHighlighted,\n      changeMap,\n    ]\n  );\n\n  useEffect(() => {\n    (async () => {\n      const data = await d3.json(mapMeta.geoDataFile);\n      if (statistic && choroplethMap.current) {\n        ready(data);\n      }\n    })();\n  }, [mapMeta, statistic, ready]);\n\n  useEffect(() => {\n    const highlightRegionInMap = (region) => {\n      const paths = d3.selectAll('.path-region');\n      paths.attr('stroke', null);\n      paths.classed('map-hover', (d, i, nodes) => {\n        if (\n          region.district === d.properties?.district &&\n          region.state === d.properties.st_nm\n        ) {\n          nodes[i].parentNode.appendChild(nodes[i]);\n          d3.select(nodes[i]).attr('stroke', function (d) {\n            if (currentMap.stat === MAP_STATISTICS.ZONE) return '#343a40';\n            return d3.select(this).classed('confirmed')\n              ? '#ff073a'\n              : d3.select(this).classed('active')\n              ? '#007bff'\n              : d3.select(this).classed('recovered')\n              ? '#28a745'\n              : d3.select(this).classed('deceased')\n              ? '#6c757d'\n              : null;\n          });\n          return true;\n        }\n        return false;\n      });\n    };\n    highlightRegionInMap(regionHighlighted);\n  }, [regionHighlighted, currentMap.stat]);\n\n  return (\n    <React.Fragment>\n      <div className=\"svg-parent fadeInUp\" style={{animationDelay: '2.5s'}}>\n        <svg id=\"chart\" preserveAspectRatio=\"xMidYMid meet\" ref={choroplethMap}>\n          <g className=\"states\" />\n          <g className=\"districts\" />\n          <g className=\"state-borders\" />\n          <g className=\"district-borders\" />\n        </svg>\n        {mapMeta.mapType === MAP_TYPES.STATE &&\n        mapData[currentMap.name]?.Unknown &&\n        mapData[currentMap.name]?.Unknown[mapOption] ? (\n          <div className=\"disclaimer\">\n            <Icon.AlertCircle />\n            {t('District-wise {{mapOption}} numbers are under reconciliation', {\n              mapOption: t(mapOption),\n            })}\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n      <div\n        className=\"svg-parent legend fadeInUp\"\n        style={{animationDelay: '2.5s'}}\n      >\n        <svg\n          id=\"legend\"\n          height=\"50\"\n          preserveAspectRatio=\"xMidYMid meet\"\n          ref={choroplethLegend}\n        >\n          <image className=\"ramp\" />\n          <g className=\"axis\">\n            <text className=\"axistext\" />\n          </g>\n        </svg>\n        <canvas\n          className=\"color-scale\"\n          style={{position: 'absolute', height: 0}}\n        />\n      </div>\n      <svg style={{position: 'absolute', height: 0}}>\n        <defs>\n          <filter id=\"balance-color\" colorInterpolationFilters=\"sRGB\">\n            <feColorMatrix\n              type=\"matrix\"\n              values=\"0.91372549 0 0 0 0.08627451 0 0.91372549 0 0 0.08627451 0 0 0.854901961 0 0.145098039 0 0 0 1 0\"\n            />\n          </filter>\n        </defs>\n      </svg>\n    </React.Fragment>\n  );\n}\n\nexport default ChoroplethMap;\n","import ChoroplethMap from './choropleth';\nimport {testedToolTip} from './tooltips';\n\nimport {\n  MAP_META,\n  MAP_STATISTICS,\n  MAP_TYPES,\n  MAP_VIEWS,\n  STATE_CODES_REVERSE,\n  STATE_POPULATIONS,\n} from '../constants';\nimport {\n  formatDate,\n  formatNumber,\n  formatDayMonth,\n  formatLastUpdated,\n} from '../utils/commonfunctions';\n\nimport {parse} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useState, useEffect, useMemo, useCallback} from 'react';\nimport ReactDOM from 'react-dom';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {Link} from 'react-router-dom';\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.regionHighlighted, currProps.regionHighlighted)) {\n    return false;\n  }\n  if (!equal(prevProps.mapOption, currProps.mapOption)) {\n    return false;\n  }\n  if (!equal(prevProps.anchor, currProps.anchor)) {\n    return false;\n  }\n  return true;\n};\n\nconst getRegionFromState = (state) => {\n  if (!state) return;\n  const region = {...state};\n  return region;\n};\n\nconst getRegionFromDistrict = (districtData, name) => {\n  if (!districtData) return;\n  const region = {...districtData};\n  return region;\n};\n\nfunction MapExplorer({\n  mapName,\n  states,\n  districts,\n  zones,\n  stateTestData,\n  regionHighlighted,\n  setRegionHighlighted,\n  anchor,\n  setAnchor,\n  mapOption,\n  setMapOption,\n  isCountryLoaded = true,\n}) {\n  const {t} = useTranslation();\n  const [currentMap, setCurrentMap] = useState({\n    name: mapName,\n    stat: MAP_STATISTICS.TOTAL,\n    view:\n      MAP_META[mapName].mapType === MAP_TYPES.COUNTRY\n        ? MAP_VIEWS.STATES\n        : MAP_VIEWS.DISTRICTS,\n  });\n  const currentMapMeta = MAP_META[currentMap.name];\n\n  const [statistic, currentMapData] = useMemo(() => {\n    let currentMapData = {};\n    let statistic = {};\n    if (currentMap.stat === MAP_STATISTICS.ZONE) {\n      const dataTypes = ['Red', 'Orange', 'Green'];\n      statistic = dataTypes.reduce((acc, dtype) => {\n        acc[dtype] = 0;\n        return acc;\n      }, {});\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY) {\n        currentMapData = Object.keys(zones).reduce((acc1, state) => {\n          acc1[state] = Object.keys(zones[state]).reduce((acc2, district) => {\n            const zone = zones[state][district].zone;\n            if (zone) {\n              acc2[district] = zone;\n              statistic[zone] += 1;\n            }\n            return acc2;\n          }, {});\n          return acc1;\n        }, {});\n      } else if (currentMapMeta.mapType === MAP_TYPES.STATE) {\n        const state = currentMap.name;\n        currentMapData[state] = Object.keys(zones[state]).reduce(\n          (acc, district) => {\n            const zone = zones[state][district].zone;\n            if (zone) {\n              acc[district] = zone;\n              statistic[zone] += 1;\n            }\n            return acc;\n          },\n          {}\n        );\n      }\n    } else {\n      const dataTypes = ['confirmed', 'active', 'recovered', 'deceased'];\n      statistic = dataTypes.reduce((acc, dtype) => {\n        acc[dtype] = {total: 0, max: 0};\n        return acc;\n      }, {});\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY) {\n        currentMapData = states.reduce((acc, state) => {\n          acc[state.state] = {};\n          dataTypes.forEach((dtype) => {\n            let typeCount =\n              parseInt(state[dtype !== 'deceased' ? dtype : 'deaths']) || 0;\n            if (currentMap.stat === MAP_STATISTICS.PER_MILLION)\n              typeCount = (1e6 * typeCount) / STATE_POPULATIONS[state.state];\n            if (state.state !== 'Total') {\n              statistic[dtype].total += typeCount;\n              if (typeCount > statistic[dtype].max) {\n                statistic[dtype].max = typeCount;\n              }\n            }\n            acc[state.state][dtype] = typeCount;\n          });\n          return acc;\n        }, {});\n      } else if (currentMapMeta.mapType === MAP_TYPES.STATE) {\n        const districtWiseData = (\n          districts[currentMap.name] || {districtData: {}}\n        ).districtData;\n        currentMapData[currentMap.name] = Object.keys(districtWiseData).reduce(\n          (acc, district) => {\n            acc[district] = {};\n            dataTypes.forEach((dtype) => {\n              const typeCount = parseInt(districtWiseData[district][dtype]);\n              statistic[dtype].total += typeCount;\n              if (typeCount > statistic[dtype].max) {\n                statistic[dtype].max = typeCount;\n              }\n              acc[district][dtype] = typeCount;\n            });\n            return acc;\n          },\n          {}\n        );\n        currentMapData[currentMap.name].Total = states.find(\n          (state) => currentMap.name === state.state\n        );\n      }\n    }\n    return [statistic, currentMapData];\n  }, [\n    currentMap.name,\n    currentMap.stat,\n    currentMapMeta.mapType,\n    districts,\n    zones,\n    states,\n  ]);\n\n  const [hoveredRegion, panelRegion] = useMemo(() => {\n    if (!regionHighlighted.district) {\n      const state = getRegionFromState(\n        states.find((state) => regionHighlighted.state === state.state)\n      );\n      return [state, state];\n    } else {\n      const stateDistrictObj = districts[regionHighlighted.state] || {\n        districtData: {},\n      };\n      const districtData = stateDistrictObj.districtData[\n        regionHighlighted.district\n      ] || {\n        confirmed: 0,\n        active: 0,\n        recovered: 0,\n        deaths: 0,\n      };\n      const district = getRegionFromDistrict(\n        districtData,\n        regionHighlighted.district\n      );\n      let state = getRegionFromState(\n        states.find((state) => state.state === regionHighlighted.state)\n      );\n      district.district = regionHighlighted.district;\n      district.state = state.state;\n      if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n        state = states.find((state) => state.state === 'Total');\n      return [district, state];\n    }\n  }, [states, districts, currentMapMeta.mapType, regionHighlighted]);\n\n  useEffect(() => {\n    if (regionHighlighted === undefined || regionHighlighted === null) return;\n\n    if ('district' in regionHighlighted) {\n      if (\n        currentMap.name !== regionHighlighted.state &&\n        !(\n          currentMapMeta.mapType === MAP_TYPES.COUNTRY &&\n          currentMap.view === MAP_VIEWS.DISTRICTS\n        )\n      ) {\n        const state = regionHighlighted.state;\n        const newMapMeta = MAP_META[state];\n        if (!newMapMeta) {\n          return;\n        }\n        setCurrentMap({\n          name: state,\n          view: MAP_VIEWS.DISTRICTS,\n          stat:\n            currentMap.stat === MAP_STATISTICS.PER_MILLION\n              ? MAP_STATISTICS.TOTAL\n              : currentMap.stat,\n        });\n      }\n    } else if (isCountryLoaded && currentMapMeta.mapType === MAP_TYPES.STATE) {\n      setCurrentMap({\n        name: 'India',\n        view:\n          currentMap.stat === MAP_STATISTICS.ZONE\n            ? MAP_VIEWS.DISTRICTS\n            : MAP_VIEWS.STATES,\n        stat: currentMap.stat,\n      });\n    }\n  }, [isCountryLoaded, regionHighlighted, currentMap, currentMapMeta.mapType]);\n\n  const switchMapToState = useCallback(\n    (state) => {\n      const newMapMeta = MAP_META[state];\n      if (!newMapMeta) {\n        return;\n      }\n      if (newMapMeta.mapType === MAP_TYPES.STATE) {\n        const {districtData} = districts[state] || {\n          districtData: {},\n        };\n        const topDistrict = Object.keys(districtData)\n          .filter((state) => state !== 'Unknown')\n          .sort((a, b) => {\n            return districtData[b].confirmed - districtData[a].confirmed;\n          })[0];\n        ReactDOM.unstable_batchedUpdates(() => {\n          setRegionHighlighted({\n            district: topDistrict,\n            state: state,\n          });\n          setCurrentMap({\n            name: state,\n            view: MAP_VIEWS.DISTRICTS,\n            stat:\n              currentMap.stat === MAP_STATISTICS.PER_MILLION\n                ? MAP_STATISTICS.TOTAL\n                : currentMap.stat,\n          });\n        });\n      } else {\n        ReactDOM.unstable_batchedUpdates(() => {\n          setCurrentMap({\n            name: 'India',\n            view:\n              currentMap.stat === MAP_STATISTICS.ZONE\n                ? MAP_VIEWS.DISTRICTS\n                : MAP_VIEWS.STATES,\n            stat: currentMap.stat,\n          });\n          setRegionHighlighted({\n            state: 'Total',\n          });\n        });\n      }\n    },\n    [currentMap.stat, districts, setRegionHighlighted]\n  );\n\n  const testObj = useMemo(\n    () =>\n      stateTestData.find(\n        (obj) => obj.state === panelRegion.state && obj.totaltested !== ''\n      ),\n    [stateTestData, panelRegion]\n  );\n\n  let hoveredRegionCount;\n  let hoveredRegionZone;\n  if (currentMap.stat !== MAP_STATISTICS.ZONE) {\n    const data =\n      hoveredRegion.district && currentMapData[hoveredRegion.state]\n        ? currentMapData[hoveredRegion.state][hoveredRegion.district]\n        : hoveredRegion.state !== currentMap.name\n        ? currentMapData[hoveredRegion.state]\n        : currentMapData[hoveredRegion.state].Total;\n    hoveredRegionCount = data\n      ? currentMap.stat === MAP_STATISTICS.PER_MILLION\n        ? Number(parseFloat(data[mapOption]).toFixed(2))\n        : data[mapOption]\n      : 0;\n  } else {\n    hoveredRegionZone =\n      zones[hoveredRegion.state] &&\n      zones[hoveredRegion.state][hoveredRegion.district]\n        ? zones[hoveredRegion.state][hoveredRegion.district].zone\n        : '';\n  }\n\n  return (\n    <div\n      className={`MapExplorer fadeInUp ${\n        anchor === 'mapexplorer' ? 'stickied' : ''\n      }`}\n      style={{\n        animationDelay: '1.5s',\n        display: anchor === 'timeseries' ? 'none' : '',\n      }}\n    >\n      {window.innerWidth > 769 && (\n        <div\n          className={`anchor ${anchor === 'mapexplorer' ? 'stickied' : ''}`}\n          onClick={() => {\n            setAnchor(anchor === 'mapexplorer' ? null : 'mapexplorer');\n          }}\n        >\n          <Icon.Anchor />\n        </div>\n      )}\n      <div className=\"header\">\n        <h1>\n          {t(currentMap.name)} {t('Map')}\n        </h1>\n        <h6>\n          {t('{{action}} over a {{mapType}} for more details', {\n            action: t(window.innerWidth <= 769 ? 'Tap' : 'Hover'),\n            mapType: t(\n              currentMapMeta.mapType === MAP_TYPES.COUNTRY\n                ? 'state/UT'\n                : 'District'\n            ),\n          })}\n        </h6>\n      </div>\n\n      <div className=\"map-stats\">\n        <div\n          className={`stats fadeInUp ${\n            mapOption === 'confirmed' ? 'focused' : ''\n          }`}\n          style={{animationDelay: '2s'}}\n          onClick={() => setMapOption('confirmed')}\n        >\n          <h5>{window.innerWidth <= 769 ? t('Cnfmd') : t('Confirmed')}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(panelRegion.confirmed)}</h1>\n            <h6>{`+${formatNumber(panelRegion.deltaconfirmed)}`}</h6>\n          </div>\n        </div>\n\n        <div\n          className={`stats is-blue fadeInUp ${\n            mapOption === 'active' ? 'focused' : ''\n          }`}\n          style={{animationDelay: '2.1s'}}\n          onClick={() => setMapOption('active')}\n        >\n          <h5>{window.innerWidth <= 769 ? t('Actv') : t('Active')}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(panelRegion.active)}</h1>\n            <h6>{` `}</h6>\n          </div>\n        </div>\n\n        <div\n          className={`stats is-green fadeInUp ${\n            mapOption === 'recovered' ? 'focused' : ''\n          }`}\n          style={{animationDelay: '2.2s'}}\n          onClick={() => setMapOption('recovered')}\n        >\n          <h5>{window.innerWidth <= 769 ? t('Rcvrd') : t('Recovered')}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(panelRegion.recovered)}</h1>\n            <h6>{`+${formatNumber(panelRegion.deltarecovered)}`}</h6>\n          </div>\n        </div>\n\n        <div\n          className={`stats is-gray fadeInUp ${\n            mapOption === 'deceased' ? 'focused' : ''\n          }`}\n          style={{animationDelay: '2.3s'}}\n          onClick={() => setMapOption('deceased')}\n        >\n          <h5>{window.innerWidth <= 769 ? t('Dcsd') : t('Deceased')}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(panelRegion.deaths)}</h1>\n            <h6>{`+${formatNumber(panelRegion.deltadeaths)}`}</h6>\n          </div>\n        </div>\n\n        <div\n          className=\"stats is-purple tested fadeInUp\"\n          style={{animationDelay: '2.4s'}}\n        >\n          <h5>{t('Tested')}</h5>\n          <div className=\"stats-bottom\">\n            <h1>{formatNumber(testObj?.totaltested)}</h1>\n          </div>\n          <h6 className=\"timestamp\">\n            {!isNaN(parse(testObj?.updatedon, 'dd/MM/yyyy', new Date()))\n              ? t('As of {{date}}', {\n                  date: formatDayMonth(testObj?.updatedon),\n                })\n              : ''}\n          </h6>\n          {testObj?.totaltested?.length > 1 && (\n            <a href={testObj.source} target=\"_noblank\">\n              <Icon.Link />\n            </a>\n          )}\n          {panelRegion.state === 'Total' ? testedToolTip : ''}\n        </div>\n      </div>\n\n      <div className=\"meta fadeInUp\" style={{animationDelay: '2.4s'}}>\n        <h2\n          className={`${\n            currentMap.stat !== MAP_STATISTICS.ZONE\n              ? mapOption !== 'confirmed'\n                ? mapOption\n                : ''\n              : hoveredRegionZone\n          }`}\n        >\n          {hoveredRegion.district\n            ? t(hoveredRegion.district)\n            : t(hoveredRegion.state)}\n        </h2>\n\n        {currentMapMeta.mapType !== MAP_TYPES.STATE &&\n          panelRegion.lastupdatedtime && (\n            <div className=\"last-update\">\n              <h6>{t('Last updated')}</h6>\n              <h3>\n                {isNaN(Date.parse(formatDate(panelRegion.lastupdatedtime)))\n                  ? ''\n                  : formatLastUpdated(panelRegion.lastupdatedtime) +\n                    ' ' +\n                    t('ago')}\n              </h3>\n            </div>\n          )}\n\n        {currentMapMeta.mapType === MAP_TYPES.STATE ? (\n          <Link to={`state/${STATE_CODES_REVERSE[panelRegion.state]}`}>\n            <div className=\"button state-page-button\">\n              <abbr>{t('Visit state page')}</abbr>\n              <Icon.ArrowRightCircle />\n            </div>\n          </Link>\n        ) : null}\n\n        {currentMap.stat !== MAP_STATISTICS.ZONE &&\n        (currentMapMeta.mapType === MAP_TYPES.STATE ||\n          (currentMapMeta.mapType === MAP_TYPES.COUNTRY &&\n            currentMap.stat !== MAP_STATISTICS.TOTAL)) ? (\n          <h1\n            className={`district ${mapOption !== 'confirmed' ? mapOption : ''}`}\n          >\n            {hoveredRegionCount}\n            <br />\n            <span>\n              {t(mapOption)}{' '}\n              {currentMap.stat === MAP_STATISTICS.PER_MILLION\n                ? ` ${t('per million')}`\n                : ''}\n            </span>\n          </h1>\n        ) : null}\n\n        {currentMapMeta.mapType === MAP_TYPES.STATE ? (\n          <div\n            className=\"button back-button\"\n            onClick={() => switchMapToState('India')}\n          >\n            {t('Back')}\n          </div>\n        ) : null}\n\n        {currentMapMeta.mapType === MAP_TYPES.STATE &&\n        currentMapData.Unknown &&\n        currentMapData.Unknown[mapOption] > 0 ? (\n          <h4 className=\"unknown\">\n            {t('Districts unknown for')} {currentMapData.Unknown[mapOption]}{' '}\n            {t('people')}\n          </h4>\n        ) : null}\n      </div>\n\n      <div>\n        {mapOption && (\n          <ChoroplethMap\n            statistic={statistic}\n            currentMap={currentMap}\n            mapData={currentMapData}\n            regionHighlighted={regionHighlighted}\n            setRegionHighlighted={setRegionHighlighted}\n            changeMap={switchMapToState}\n            isCountryLoaded={isCountryLoaded}\n            mapOption={mapOption}\n          />\n        )}\n      </div>\n\n      <div className=\"tabs-map\">\n        <div\n          className={`tab ${\n            currentMap.stat === MAP_STATISTICS.TOTAL ? 'focused' : ''\n          }`}\n          onClick={() => {\n            setCurrentMap({\n              name: currentMap.name,\n              view:\n                currentMapMeta.mapType === MAP_TYPES.COUNTRY\n                  ? MAP_VIEWS.STATES\n                  : MAP_VIEWS.DISTRICTS,\n              stat: MAP_STATISTICS.TOTAL,\n            });\n            if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n              setRegionHighlighted({\n                state: regionHighlighted.state,\n              });\n          }}\n        >\n          <h4>{t('Total Cases')}</h4>\n        </div>\n        {isCountryLoaded && (\n          <div\n            className={`tab ${\n              currentMap.stat === MAP_STATISTICS.PER_MILLION ? 'focused' : ''\n            }`}\n            onClick={() => {\n              if (currentMapMeta.mapType === MAP_TYPES.STATE) return;\n              setCurrentMap({\n                name: currentMap.name,\n                view: MAP_VIEWS.STATES,\n                stat: MAP_STATISTICS.PER_MILLION,\n              });\n              setRegionHighlighted({\n                state: regionHighlighted.state,\n              });\n            }}\n          >\n            <h4>\n              {t('Cases per million')}\n              <sup>&dagger;</sup>\n            </h4>\n          </div>\n        )}\n        <div\n          className={`tab ${\n            currentMap.stat === MAP_STATISTICS.ZONE ? 'focused' : ''\n          }`}\n          onClick={() => {\n            setCurrentMap({\n              name: currentMap.name,\n              view: MAP_VIEWS.DISTRICTS,\n              stat: MAP_STATISTICS.ZONE,\n            });\n            if (currentMapMeta.mapType === MAP_TYPES.COUNTRY)\n              setRegionHighlighted({\n                state: 'Total',\n              });\n          }}\n        >\n          <h4>{t('Zones')}</h4>\n        </div>\n      </div>\n\n      <h6 className=\"footnote table-fineprint\">\n        &dagger; {t('Based on 2019 population projection by NCP') + ' ('}\n        <a\n          href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n          target=\"_noblank\"\n          style={{color: '#6c757d'}}\n        >\n          {t('source')}\n        </a>\n        )\n      </h6>\n    </div>\n  );\n}\n\nexport default React.memo(MapExplorer, isEqual);\n","import {testedToolTip} from './tooltips';\n\nimport {\n  sliceTimeseriesFromEnd,\n  formatNumber,\n  formatTimeseriesDate,\n  formatTimeseriesTickX,\n} from '../utils/commonfunctions';\nimport {useResizeObserver} from '../utils/hooks';\n\nimport * as d3 from 'd3';\nimport {addDays, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useState, useEffect, useRef, useCallback} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nconst isEqual = (prevProps, currProps) => {\n  if (!currProps.isIntersecting) return true;\n  if (!prevProps.isIntersecting) return false;\n  if (!equal(currProps.chartType, prevProps.chartType)) {\n    return false;\n  }\n  if (!equal(currProps.mode, prevProps.mode)) {\n    return false;\n  }\n  if (!equal(currProps.logMode, prevProps.logMode)) {\n    return false;\n  }\n  if (!equal(currProps.stateCode, prevProps.stateCode)) {\n    return false;\n  }\n  return true;\n};\n\nfunction TimeSeries({timeseriesProp, chartType, mode, logMode, stateCode}) {\n  const {t} = useTranslation();\n  const [lastDaysCount, setLastDaysCount] = useState(\n    window.innerWidth > 512 ? Infinity : 30\n  );\n  const [timeseries, setTimeseries] = useState({});\n  const [datapoint, setDatapoint] = useState({});\n  const [index, setIndex] = useState(0);\n  const [moving, setMoving] = useState(false);\n\n  const svgRef1 = useRef();\n  const svgRef2 = useRef();\n  const svgRef3 = useRef();\n  const svgRef4 = useRef();\n  const svgRef5 = useRef();\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const transformTimeSeries = useCallback(\n    (timeseries) => {\n      if (timeseries.length > 1) {\n        const slicedTimeseries = sliceTimeseriesFromEnd(\n          timeseries,\n          lastDaysCount\n        );\n        setIndex(slicedTimeseries.length - 1);\n        setTimeseries(slicedTimeseries);\n      }\n    },\n    [lastDaysCount]\n  );\n\n  useEffect(() => {\n    transformTimeSeries(timeseriesProp);\n  }, [lastDaysCount, timeseriesProp, transformTimeSeries]);\n\n  const graphData = useCallback(\n    (timeseries) => {\n      if (!dimensions) return;\n      const width = dimensions.width;\n      const height = dimensions.height;\n\n      // Margins\n      const margin = {top: 15, right: 35, bottom: 25, left: 25};\n      const chartRight = width - margin.right;\n      const chartBottom = height - margin.bottom;\n\n      const T = timeseries.length;\n      const yBufferTop = 1.2;\n      const yBufferBottom = 1.1;\n\n      setDatapoint(timeseries[T - 1]);\n      setIndex(T - 1);\n\n      const svg1 = d3.select(svgRef1.current);\n      const svg2 = d3.select(svgRef2.current);\n      const svg3 = d3.select(svgRef3.current);\n      const svg4 = d3.select(svgRef4.current);\n      const svg5 = d3.select(svgRef5.current);\n\n      const dateMin = subDays(timeseries[0].date, 1);\n      const dateMax = addDays(timeseries[T - 1].date, 1);\n\n      const xScale = d3\n        .scaleTime()\n        .clamp(true)\n        .domain([dateMin, dateMax])\n        .range([margin.left, chartRight]);\n\n      // Number of x-axis ticks\n      const numTicksX = width < 480 ? 4 : 7;\n\n      const xAxis = (g) =>\n        g.attr('class', 'x-axis').call(\n          d3\n            .axisBottom(xScale)\n            .ticks(numTicksX)\n            .tickFormat((tick) => {\n              return formatTimeseriesTickX(tick);\n            })\n        );\n\n      const xAxis2 = (g, yScale) => {\n        g.attr('class', 'x-axis2')\n          .call(d3.axisBottom(xScale).tickValues([]).tickSize(0))\n          .select('.domain')\n          .style('transform', `translateY(${yScale(0)}px)`);\n\n        if (yScale(0) !== chartBottom) g.select('.domain').attr('opacity', 0.4);\n        else g.select('.domain').attr('opacity', 0);\n      };\n\n      const yAxis = (g, yScale) =>\n        g\n          .attr('class', 'y-axis')\n          .call(d3.axisRight(yScale).ticks(4, '0~s').tickPadding(5));\n\n      // Arrays of objects\n      const plotTotal = chartType === 1;\n      const dataTypesTotal = [\n        'totalconfirmed',\n        'totalactive',\n        'totalrecovered',\n        'totaldeceased',\n        'totaltested',\n      ];\n      const dataTypesDaily = [\n        'dailyconfirmed',\n        'dailyactive',\n        'dailyrecovered',\n        'dailydeceased',\n        'dailytested',\n      ];\n\n      const colors = ['#ff073a', '#007bff', '#28a745', '#6c757d', '#201aa2'];\n\n      const svgArray = [svg1, svg2, svg3, svg4, svg5];\n\n      let yScales;\n      if (plotTotal) {\n        const uniformScaleMin = d3.min(timeseries, (d) =>\n          Math.min(d.totalactive, d.totalrecovered, d.totaldeceased)\n        );\n        const uniformScaleMax = d3.max(timeseries, (d) => d.totalconfirmed);\n        const yScaleUniformLinear = d3\n          .scaleLinear()\n          .clamp(true)\n          .domain([uniformScaleMin, Math.max(1, yBufferTop * uniformScaleMax)])\n          .nice()\n          .range([chartBottom, margin.top]);\n\n        const yScaleUniformLog = d3\n          .scaleLog()\n          .clamp(true)\n          .domain([\n            Math.max(1, uniformScaleMin),\n            Math.max(10, yBufferTop * uniformScaleMax),\n          ])\n          .nice()\n          .range([chartBottom, margin.top]);\n\n        yScales = dataTypesTotal.map((type) => {\n          const yScaleLinear = d3\n            .scaleLinear()\n            .clamp(true)\n            .domain([\n              d3.min(timeseries, (d) => d[type]),\n              Math.max(1, yBufferTop * d3.max(timeseries, (d) => d[type])),\n            ])\n            .nice()\n            .range([chartBottom, margin.top]);\n          const yScaleLog = d3\n            .scaleLog()\n            .clamp(true)\n            .domain([\n              Math.max(\n                1,\n                d3.min(timeseries, (d) => d[type])\n              ),\n              Math.max(10, yBufferTop * d3.max(timeseries, (d) => d[type])),\n            ])\n            .nice()\n            .range([chartBottom, margin.top]);\n          if (mode && type !== 'totaltested')\n            return logMode ? yScaleUniformLog : yScaleUniformLinear;\n          else return logMode ? yScaleLog : yScaleLinear;\n        });\n      } else {\n        const yScaleDailyUniform = d3\n          .scaleLinear()\n          .clamp(true)\n          .domain([\n            yBufferBottom *\n              Math.min(\n                0,\n                d3.min(timeseries, (d) => d.dailyactive)\n              ),\n            Math.max(\n              1,\n              yBufferTop *\n                d3.max(timeseries, (d) =>\n                  Math.max(d.dailyconfirmed, d.dailyrecovered, d.dailydeceased)\n                )\n            ),\n          ])\n          .nice()\n          .range([chartBottom, margin.top]);\n\n        yScales = dataTypesDaily.map((type) => {\n          if (mode && type !== 'dailytested') return yScaleDailyUniform;\n          const yScaleLinear = d3\n            .scaleLinear()\n            .clamp(true)\n            .domain([\n              yBufferBottom *\n                Math.min(\n                  0,\n                  d3.min(timeseries, (d) => d[type])\n                ),\n              Math.max(1, yBufferTop * d3.max(timeseries, (d) => d[type])),\n            ])\n            .nice()\n            .range([chartBottom, margin.top]);\n          return yScaleLinear;\n        });\n      }\n\n      /* Focus dots */\n      const focus = svgArray.map((svg, i) => {\n        return svg\n          .selectAll('.focus')\n          .data([timeseries[T - 1]], (d) => d.date)\n          .join((enter) =>\n            enter.append('circle').attr('cx', (d) => xScale(d.date))\n          )\n          .attr('class', 'focus')\n          .attr('fill', colors[i])\n          .attr('stroke', colors[i])\n          .attr('r', 4);\n      });\n\n      function mousemove() {\n        const xm = d3.mouse(this)[0];\n        const date = xScale.invert(xm);\n        const bisectDate = d3.bisector((d) => d.date).left;\n        let i = bisectDate(timeseries, date, 1);\n        if (0 <= i && i < T) {\n          if (date - timeseries[i - 1].date < timeseries[i].date - date) --i;\n          setDatapoint(timeseries[i]);\n          setIndex(i);\n          setMoving(true);\n          const d = timeseries[i];\n          focus.forEach((f, j) => {\n            const yScale = yScales[j];\n            const type = plotTotal ? dataTypesTotal[j] : dataTypesDaily[j];\n            if (!isNaN(d[type]))\n              f.attr('cx', xScale(d.date))\n                .attr('cy', yScale(d[type]))\n                .attr('opacity', 1);\n            else f.attr('opacity', 0);\n          });\n        }\n      }\n\n      function mouseout() {\n        setDatapoint(timeseries[T - 1]);\n        setIndex(T - 1);\n        setMoving(false);\n        focus.forEach((f, j) => {\n          const yScale = yScales[j];\n          const type = plotTotal ? dataTypesTotal[j] : dataTypesDaily[j];\n          if (!isNaN(timeseries[T - 1][type]))\n            f.attr('cx', xScale(timeseries[T - 1].date))\n              .attr('cy', yScale(timeseries[T - 1][type]))\n              .attr('opacity', 1);\n          else f.attr('opacity', 0);\n        });\n      }\n\n      /* Begin drawing charts */\n      svgArray.forEach((svg, i) => {\n        // Transition interval\n        const t = svg.transition().duration(500);\n        const typeTotal = dataTypesTotal[i];\n        const typeDaily = dataTypesDaily[i];\n        const type = plotTotal ? typeTotal : typeDaily;\n\n        const filteredTimeseries = timeseries.filter((d) => !isNaN(d[type]));\n        const color = colors[i];\n        const yScale = yScales[i];\n\n        /* X axis */\n        svg\n          .select('.x-axis')\n          .style('transform', `translateY(${chartBottom}px)`)\n          .transition(t)\n          .call(xAxis);\n        svg.select('.x-axis2').transition(t).call(xAxis2, yScale);\n        /* Y axis */\n        svg\n          .select('.y-axis')\n          .style('transform', `translateX(${chartRight}px)`)\n          .transition(t)\n          .call(yAxis, yScale);\n\n        /* Path dots */\n        svg\n          .selectAll('.dot')\n          .data(filteredTimeseries, (d) => d.date)\n          .join((enter) =>\n            enter\n              .append('circle')\n              .attr('cy', chartBottom)\n              .attr('cx', (d) => xScale(d.date))\n          )\n          .attr('class', 'dot')\n          .attr('fill', color)\n          .attr('stroke', color)\n          .attr('r', 2)\n          .transition(t)\n          .attr('cx', (d) => xScale(d.date))\n          .attr('cy', (d) => yScale(d[type]));\n\n        if (!isNaN(timeseries[T - 1][type]))\n          focus[i]\n            .transition(t)\n            .attr('cx', (d) => xScale(d.date))\n            .attr('cy', (d) => yScale(d[type]))\n            .attr('opacity', 1);\n        else focus[i].transition(t).attr('opacity', 0);\n\n        if (plotTotal) {\n          /* TOTAL TRENDS */\n          svg.selectAll('.stem').remove();\n          const path = svg\n            .selectAll('.trend')\n            .data([[...filteredTimeseries].reverse()])\n            .join('path')\n            .attr('class', 'trend')\n            .attr('fill', 'none')\n            .attr('stroke', color + '99')\n            .attr('stroke-width', 4);\n          // HACK\n          // Path interpolation is non-trivial. Ideally, a custom path tween\n          // function should be defined which takes care that old path dots\n          // transition synchronously along with the path transition. This hack\n          // simulates that behaviour.\n          if (path.attr('d')) {\n            const n = path.node().getTotalLength();\n            const p = path.node().getPointAtLength(n);\n            // Append points at end of path for better interpolation\n            path.attr(\n              'd',\n              () => path.attr('d') + `L${p.x},${p.y}`.repeat(3 * T)\n            );\n          }\n          path\n            .transition(t)\n            .attr('opacity', plotTotal ? 1 : 0)\n            .attr(\n              'd',\n              d3\n                .line()\n                .x((d) => xScale(d.date))\n                .y((d) => yScale(d[typeTotal]))\n                .curve(d3.curveMonotoneX)\n            );\n          // Using d3-interpolate-path\n          // .attrTween('d', function (d) {\n          //   var previous = path.attr('d');\n          //   var current = line(d);\n          //   return interpolatePath(previous, current);\n          // });\n        } else {\n          /* DAILY TRENDS */\n          svg.selectAll('.trend').remove();\n          svg\n            .selectAll('.stem')\n            .data(filteredTimeseries, (d) => d.date)\n            .join((enter) =>\n              enter\n                .append('line')\n                .attr('x1', (d) => xScale(d.date))\n                .attr('y1', chartBottom)\n                .attr('x2', (d) => xScale(d.date))\n                .attr('y2', chartBottom)\n            )\n            .attr('class', 'stem')\n            .style('stroke', color + '99')\n            .style('stroke-width', 4)\n            .transition(t)\n            .attr('x1', (d) => xScale(d.date))\n            .attr('y1', yScale(0))\n            .attr('x2', (d) => xScale(d.date))\n            .attr('y2', (d) => yScale(d[typeDaily]));\n        }\n\n        svg\n          .on('mousemove', mousemove)\n          .on('touchmove', mousemove)\n          .on('mouseout', mouseout)\n          .on('touchend', mouseout);\n      });\n    },\n    [chartType, dimensions, logMode, mode]\n  );\n\n  useEffect(() => {\n    if (timeseries.length > 1) {\n      graphData(timeseries);\n    }\n  }, [timeseries, graphData]);\n\n  const dateStr = datapoint.date ? formatTimeseriesDate(datapoint.date) : '';\n\n  const chartKey1 = chartType === 1 ? 'totalconfirmed' : 'dailyconfirmed';\n  const chartKey2 = chartType === 1 ? 'totalactive' : 'dailyactive';\n  const chartKey3 = chartType === 1 ? 'totalrecovered' : 'dailyrecovered';\n  const chartKey4 = chartType === 1 ? 'totaldeceased' : 'dailydeceased';\n  const chartKey5 = chartType === 1 ? 'totaltested' : 'dailytested';\n\n  // Function for calculate increased/decreased count for each type of data\n  const currentStatusCount = (chartType) => {\n    if (timeseries.length <= 0 || index <= 0 || index >= timeseries.length)\n      return '';\n    const currentDiff =\n      timeseries[index][chartType] - timeseries[index - 1][chartType];\n    const formatedDiff = formatNumber(currentDiff);\n    return currentDiff >= 0 ? `+${formatedDiff}` : formatedDiff;\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"TimeSeries fadeInUp\" style={{animationDelay: '2.7s'}}>\n        <div className=\"svg-parent\" ref={wrapperRef}>\n          <div className=\"stats\">\n            <h5 className={`${!moving ? 'title' : ''}`}>{t('Confirmed')}</h5>\n            <h5 className={`${moving ? 'title' : ''}`}>{`${dateStr}`}</h5>\n            <div className=\"stats-bottom\">\n              <h2>{formatNumber(datapoint[chartKey1])}</h2>\n              <h6>{currentStatusCount(chartKey1)}</h6>\n            </div>\n          </div>\n          <svg ref={svgRef1} preserveAspectRatio=\"xMidYMid meet\">\n            <g className=\"x-axis\" />\n            <g className=\"x-axis2\" />\n            <g className=\"y-axis\" />\n          </svg>\n        </div>\n\n        <div className=\"svg-parent is-blue\">\n          <div className=\"stats is-blue\">\n            <h5 className={`${!moving ? 'title' : ''}`}>{t('Active')}</h5>\n            <h5 className={`${moving ? 'title' : ''}`}>{`${dateStr}`}</h5>\n            <div className=\"stats-bottom\">\n              <h2>{formatNumber(datapoint[chartKey2])}</h2>\n              <h6>{currentStatusCount(chartKey2)}</h6>\n            </div>\n          </div>\n          <svg ref={svgRef2} preserveAspectRatio=\"xMidYMid meet\">\n            <g className=\"x-axis\" />\n            <g className=\"x-axis2\" />\n            <g className=\"y-axis\" />\n          </svg>\n        </div>\n\n        <div className=\"svg-parent is-green\">\n          <div className=\"stats is-green\">\n            <h5 className={`${!moving ? 'title' : ''}`}>{t('Recovered')}</h5>\n            <h5 className={`${moving ? 'title' : ''}`}>{`${dateStr}`}</h5>\n            <div className=\"stats-bottom\">\n              <h2>{formatNumber(datapoint[chartKey3])}</h2>\n              <h6>{currentStatusCount(chartKey3)}</h6>\n            </div>\n          </div>\n          <svg ref={svgRef3} preserveAspectRatio=\"xMidYMid meet\">\n            <g className=\"x-axis\" />\n            <g className=\"x-axis2\" />\n            <g className=\"y-axis\" />\n          </svg>\n        </div>\n\n        <div className=\"svg-parent is-gray\">\n          <div className=\"stats is-gray\">\n            <h5 className={`${!moving ? 'title' : ''}`}>{t('Deceased')}</h5>\n            <h5 className={`${moving ? 'title' : ''}`}>{`${dateStr}`}</h5>\n            <div className=\"stats-bottom\">\n              <h2>{formatNumber(datapoint[chartKey4])}</h2>\n              <h6>{currentStatusCount(chartKey4)}</h6>\n            </div>\n          </div>\n          <svg ref={svgRef4} preserveAspectRatio=\"xMidYMid meet\">\n            <g className=\"x-axis\" />\n            <g className=\"x-axis2\" />\n            <g className=\"y-axis\" />\n          </svg>\n        </div>\n\n        <div className=\"svg-parent is-purple\">\n          <div className=\"stats is-purple\">\n            <h5 className={`${!moving ? 'title' : ''}`}>\n              {t('Tested')} {stateCode === 'TT' ? testedToolTip : ''}\n            </h5>\n            <h5 className={`${moving ? 'title' : ''}`}>{`${dateStr}`}</h5>\n            <div className=\"stats-bottom\">\n              <h2>{formatNumber(datapoint[chartKey5])}</h2>\n              <h6>{currentStatusCount(chartKey5)}</h6>\n            </div>\n          </div>\n          <svg ref={svgRef5} preserveAspectRatio=\"xMidYMid meet\">\n            <g className=\"x-axis\" />\n            <g className=\"x-axis2\" />\n            <g className=\"y-axis\" />\n          </svg>\n        </div>\n      </div>\n\n      <div className=\"pills\">\n        <button\n          type=\"button\"\n          onClick={() => setLastDaysCount(Infinity)}\n          className={lastDaysCount === Infinity ? 'selected' : ''}\n        >\n          {t('Beginning')}\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => setLastDaysCount(30)}\n          className={lastDaysCount === 30 ? 'selected' : ''}\n          aria-label=\"1 month\"\n        >\n          {`1 ${t('Month')}`}\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => setLastDaysCount(14)}\n          className={lastDaysCount === 14 ? 'selected' : ''}\n          aria-label=\"14 days\"\n        >\n          {`2 ${t('Weeks')}`}\n        </button>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default React.memo(TimeSeries, isEqual);\n","import {ResizeObserver} from '@juggle/resize-observer';\nimport {useState, useEffect} from 'react';\n\nexport const useResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries, observer) => {\n      entries.forEach((entry, index) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n","import TimeSeries from './timeseries';\n\nimport 'intersection-observer';\nimport Observer from '@researchgate/react-intersection-observer';\nimport equal from 'fast-deep-equal';\nimport React, {useState} from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {useLocalStorage} from 'react-use';\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.activeStateCode, prevProps.activeStateCode)) {\n    return false;\n  }\n  if (!equal(currProps.anchor, prevProps.anchor)) {\n    return false;\n  }\n  return true;\n};\n\nfunction TimeSeriesExplorer({\n  timeseries,\n  activeStateCode,\n  onHighlightState,\n  states,\n  anchor,\n  setAnchor,\n  isIntersecting,\n}) {\n  const [chartType, setChartType] = useLocalStorage('timeseriesChartType', 1);\n  const [isTimeseriesIntersecting, setIsTimeseriesIntersecting] = useState(\n    false\n  );\n\n  const [timeseriesMode, setTimeseriesMode] = useLocalStorage(\n    'timeseriesMode',\n    true\n  );\n  const [timeseriesLogMode, setTimeseriesLogMode] = useLocalStorage(\n    'timeseriesLogMode',\n    false\n  );\n  const {t} = useTranslation();\n\n  const options = {\n    rootMargin: '0px 0px 0px 0px',\n  };\n\n  return (\n    <Observer\n      options={options}\n      onChange={({isIntersecting}) =>\n        setIsTimeseriesIntersecting(isIntersecting)\n      }\n    >\n      <div\n        className={`TimeSeriesExplorer ${\n          anchor === 'timeseries' ? 'stickied' : ''\n        }`}\n        style={{display: anchor === 'mapexplorer' ? 'none' : ''}}\n      >\n        <div\n          className=\"timeseries-header fadeInUp\"\n          style={{animationDelay: '2.5s'}}\n        >\n          {window.innerWidth > 769 && anchor !== undefined && (\n            <div\n              className={`anchor ${anchor === 'timeseries' ? 'stickied' : ''}`}\n              onClick={() => {\n                setAnchor(anchor === 'timeseries' ? null : 'timeseries');\n              }}\n            >\n              <Icon.Anchor />\n            </div>\n          )}\n\n          <h1>{t('Spread Trends')}</h1>\n          <div className=\"tabs\">\n            <div\n              className={`tab ${chartType === 1 ? 'focused' : ''}`}\n              onClick={() => {\n                setChartType(1);\n              }}\n            >\n              <h4>{t('Cumulative')}</h4>\n            </div>\n            <div\n              className={`tab ${chartType === 2 ? 'focused' : ''}`}\n              onClick={() => {\n                setChartType(2);\n              }}\n            >\n              <h4>{t('Daily')}</h4>\n            </div>\n          </div>\n\n          <div className=\"scale-modes\">\n            <label className=\"main\">{t('Scale Modes')}</label>\n            <div className=\"timeseries-mode\">\n              <label htmlFor=\"timeseries-mode\">{t('Uniform')}</label>\n              <input\n                id=\"timeseries-mode\"\n                type=\"checkbox\"\n                checked={timeseriesMode}\n                className=\"switch\"\n                aria-label={t('Checked by default to scale uniformly.')}\n                onChange={(event) => {\n                  setTimeseriesMode(!timeseriesMode);\n                }}\n              />\n            </div>\n            <div\n              className={`timeseries-logmode ${\n                chartType !== 1 ? 'disabled' : ''\n              }`}\n            >\n              <label htmlFor=\"timeseries-logmode\">{t('Logarithmic')}</label>\n              <input\n                id=\"timeseries-logmode\"\n                type=\"checkbox\"\n                checked={chartType === 1 && timeseriesLogMode}\n                className=\"switch\"\n                disabled={chartType !== 1}\n                onChange={(event) => {\n                  setTimeseriesLogMode(!timeseriesLogMode);\n                }}\n              />\n            </div>\n          </div>\n\n          {states && (\n            <div className=\"trends-state-name\">\n              <select\n                value={activeStateCode}\n                onChange={({target}) => {\n                  const selectedState = target.selectedOptions[0].getAttribute(\n                    'statedata'\n                  );\n                  onHighlightState(JSON.parse(selectedState));\n                }}\n              >\n                {states.map((s) => {\n                  return (\n                    <option\n                      value={s.statecode}\n                      key={s.statecode}\n                      statedata={JSON.stringify(s)}\n                    >\n                      {s.statecode === 'TT' ? t('All States') : t(s.state)}\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n          )}\n        </div>\n\n        {timeseries && (\n          <TimeSeries\n            timeseriesProp={timeseries}\n            chartType={chartType}\n            mode={timeseriesMode}\n            logMode={timeseriesLogMode}\n            isTotal={activeStateCode === 'TT'}\n            isIntersecting={isTimeseriesIntersecting}\n          />\n        )}\n\n        <div className=\"alert\">\n          <Icon.AlertOctagon />\n          <div className=\"alert-right\">\n            {t('Tested chart is independent of uniform scaling')}\n          </div>\n        </div>\n      </div>\n    </Observer>\n  );\n}\n\nexport default React.memo(TimeSeriesExplorer, isEqual);\n","import axios from 'axios';\nimport * as d3 from 'd3';\nimport React, {useEffect, useRef, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport ForceGraph2D from 'react-force-graph-2d';\n\nconst isEqual = () => {\n  return true;\n};\n\nfunction Clusters({stateCode}) {\n  const [fetched, setFetched] = useState(false);\n  const [stateRawData, setStateRawData] = useState([]);\n  const [networkData, setNetworkData] = useState([]);\n\n  function prepareNetworkData(data) {\n    // Parse data\n    let contractedStr = data.reduce(\n      (acc, v) => acc + v.contractedfromwhichpatientsuspected + ', ',\n      ''\n    );\n    contractedStr = contractedStr.replace(/\\s+/g, '');\n    const sources = new Set(contractedStr.match(/[^,]+/g));\n\n    // Prepare nodes and links\n    const nodes = [];\n    const nodesSet = new Set();\n    const links = [];\n    data.forEach((d) => {\n      const contractedStr = d.contractedfromwhichpatientsuspected.replace(\n        /\\s+/g,\n        ''\n      );\n      const contracted = contractedStr.match(/[^,]+/g);\n      if (contracted) {\n        const pid = 'P' + d.patientnumber;\n        nodesSet.add(pid);\n        nodes.push({\n          id: pid,\n          group: sources.has(pid) ? 'source' : 'target',\n          raw: d,\n        });\n        contracted.forEach((p) => {\n          links.push({\n            source: p,\n            target: pid,\n          });\n        });\n      }\n    });\n\n    // Add missing nodes\n    links.forEach((d) => {\n      if (!nodesSet.has(d.source)) {\n        nodes.push({\n          id: d.source,\n          group: 'source',\n          raw: d.source,\n        });\n        nodesSet.add(d.source);\n      }\n    });\n    return {\n      nodes: nodes,\n      links: links,\n    };\n  }\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        const rawDataResponse = await axios.get(\n          'https://api.covid19india.org/raw_data.json'\n        );\n        setStateRawData(\n          rawDataResponse.data.raw_data.filter((d) => d.statecode === stateCode)\n        );\n        setFetched(true);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    if (!fetched) {\n      getData();\n    }\n  }, [fetched, stateCode]);\n\n  useEffect(() => {\n    setNetworkData(prepareNetworkData(stateRawData));\n  }, [stateRawData]);\n\n  const NetworkGraph = () => {\n    const fgRef = useRef();\n\n    useEffect(() => {\n      const fg = fgRef.current;\n      const width = document.getElementById('clusters').offsetWidth;\n      const height = width;\n      // Deactivate existing forces\n      fg.d3Force('charge').strength(-60);\n      fg.d3Force('collision', d3.forceCollide());\n      fg.d3Force('x', d3.forceX().strength(0.3));\n      fg.d3Force('y', d3.forceY().strength(0.3));\n      fg.d3Force('box', boxForce);\n\n      // Custom force to keep everything inside box\n      function boxForce() {\n        for (let i = 0, n = networkData.nodes.length; i < n; ++i) {\n          const currNode = networkData.nodes[i];\n          currNode.x = Math.max(-width, Math.min(width, currNode.x));\n          currNode.y = Math.max(-height, Math.min(height, currNode.y));\n        }\n      }\n    }, []);\n\n    const width = document.getElementById('clusters').offsetWidth;\n    const height = width;\n\n    return (\n      <ForceGraph2D\n        ref={fgRef}\n        width={width}\n        height={height}\n        graphData={networkData}\n        nodeLabel=\"id\"\n        nodeColor={(node) => (node.group === 'source' ? '#dc3545' : 'gray')}\n        linkDirectionalParticleColor={() => 'red'}\n        linkDirectionalParticles={1}\n        linkDirectionalParticleWidth={(link) =>\n          link.source.id[0] === 'P' ? 2 : 0\n        }\n        enableZoomPanInteraction={false}\n      />\n    );\n  };\n\n  useEffect(() => {\n    ReactDOM.render(<NetworkGraph />, document.getElementById('clusters'));\n  }, [networkData]);\n\n  return <div id=\"clusters\"></div>;\n}\n\nexport default React.memo(Clusters, isEqual);\n","import * as d3 from 'd3';\nimport equal from 'fast-deep-equal';\nimport React, {useEffect, useRef, useState} from 'react';\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.arrayKey, currProps.arrayKey)) return false;\n  if (!equal(prevProps.timeseries, currProps.timeseries)) return false;\n  return true;\n};\n\nfunction DeltaBarGraph({timeseries, arrayKey}) {\n  const [data, setData] = useState([]);\n  const svgRef = useRef();\n\n  useEffect(() => {\n    setData(timeseries);\n  }, [timeseries]);\n\n  useEffect(() => {\n    if (!data.length) return;\n\n    const svg = d3.select(svgRef.current);\n    const width = +svg.attr('width');\n    const height = +svg.attr('height');\n\n    const margin = {top: 50, right: 0, bottom: 50, left: 0};\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const r = 5;\n\n    const formatTime = d3.timeFormat('%e %b');\n    const xScale = d3\n      .scaleBand()\n      .domain(data.map((d) => formatTime(d.date)))\n      .range([margin.left, chartRight])\n      .paddingInner(0.33);\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([\n        Math.min(\n          0,\n          d3.min(data, (d) => d[arrayKey])\n        ),\n        Math.max(\n          1,\n          d3.max(data, (d) => d[arrayKey])\n        ),\n      ])\n      .range([chartBottom, margin.top]);\n\n    const xAxis = d3.axisBottom(xScale).tickSize(0);\n\n    const t = svg.transition().duration(500);\n    svg.selectAll('.delta').remove();\n    svg\n      .select('.x-axis')\n      .transition(t)\n      .style('transform', `translateY(${yScale(0)}px)`)\n      .call(xAxis)\n      .on('start', () => svg.select('.domain').remove())\n      .selectAll('text')\n      .attr('y', 0)\n      .attr('dy', (d, i) => (data[i][arrayKey] < 0 ? '-1.5em' : '1.5em'))\n      .style('text-anchor', 'middle')\n      .attr('fill', (d, i) => {\n        switch (arrayKey) {\n          case 'dailyconfirmed':\n            return '#dc3545';\n          case 'dailyrecovered':\n            return '#28a745';\n          case 'dailyactive':\n            return '#0479fb';\n          default:\n            return '#6c757d';\n        }\n      });\n\n    svg\n      .selectAll('.bar')\n      .data(data)\n      .join('path')\n      .attr('class', 'bar')\n      .transition(t)\n      .attr('d', (d) =>\n        roundedBar(\n          xScale(formatTime(d.date)),\n          yScale(0),\n          xScale.bandwidth(),\n          yScale(0) - yScale(d[arrayKey]),\n          r\n        )\n      )\n      .attr('fill', (d, i) => {\n        if (arrayKey === 'dailyconfirmed')\n          return i < data.length - 1 ? '#dc354590' : '#dc3545';\n        else if (arrayKey === 'dailyrecovered')\n          return i < data.length - 1 ? '#28a74590' : '#28a745';\n        else if (arrayKey === 'dailyactive')\n          return i < data.length - 1 ? '#007bff90' : '#007bff';\n        else return i < data.length - 1 ? '#6c757d90' : '#6c757d';\n      })\n      .on('end', () =>\n        svg\n          .selectAll('.delta')\n          .data(arrayKey === 'dailyconfirmed' ? data : [])\n          .join('text')\n          .attr('class', 'delta')\n          .attr('text-anchor', 'middle')\n          .attr('font-size', '11px')\n          .attr('x', (d) => xScale(formatTime(d.date)) + xScale.bandwidth() / 2)\n          .attr('y', (d) => yScale(d[arrayKey]) - 6)\n          .text((d) => d[arrayKey])\n          .append('tspan')\n          .attr('class', 'percent')\n          .attr('x', (d) => xScale(formatTime(d.date)) + xScale.bandwidth() / 2)\n          .attr('dy', '-1.2em')\n          .text((d, i) =>\n            i && data[i - 1][arrayKey]\n              ? d3.format('+.1%')(\n                  (data[i][arrayKey] - data[i - 1][arrayKey]) /\n                    data[i - 1][arrayKey]\n                )\n              : ''\n          )\n      );\n  }, [data, arrayKey]);\n\n  return (\n    <div className=\"DeltaBarGraph fadeInUp\" style={{animationDelay: '0.8s'}}>\n      <svg\n        ref={svgRef}\n        width=\"250\"\n        height=\"250\"\n        viewBox=\"0 0 250 250\"\n        preserveAspectRatio=\"xMidYMid meet\"\n      >\n        <g className=\"x-axis\" />\n        <g className=\"y-axis\" />\n      </svg>\n    </div>\n  );\n}\n\nexport default React.memo(DeltaBarGraph, isEqual);\n\nfunction roundedBar(x, y, w, h, r) {\n  r = Math.sign(h) * Math.min(Math.abs(h), r);\n  const paths = [\n    `M ${x} ${y}`,\n    `v ${-h + r}`,\n    `q 0 ${-r} ${Math.abs(r)} ${-r}`,\n    `h ${w - 2 * Math.abs(r)}`,\n    `q ${Math.abs(r)} 0 ${Math.abs(r)} ${r}`,\n    `v ${h - r}`,\n    'Z',\n  ];\n  return paths.join(' ');\n}\n","import React from 'react';\nimport * as Icon from 'react-feather';\n\nfunction StateMetaCard({\n  title,\n  statistic,\n  total,\n  formula,\n  date,\n  description,\n  className,\n}) {\n  return (\n    <div className={`meta-item ${className}`}>\n      <div className=\"meta-item-top\">\n        <h3>{title}</h3>\n        <span\n          data-tip={formula}\n          data-event=\"touchstart mouseover\"\n          data-event-off=\"mouseleave\"\n          data-for=\"stateMeta\"\n          onClick={(e) => e.stopPropagation()}\n        >\n          <Icon.Info />\n        </span>\n      </div>\n      <h1>{statistic}</h1>\n      <h5>{date}</h5>\n      {total && <h5>{`India has ${total} CPM`}</h5>}\n      <p>{description}</p>\n    </div>\n  );\n}\n\nexport default StateMetaCard;\n","import StateMetaCard from './statemetacard';\n\nimport {formatNumber} from '../utils/commonfunctions';\n\nimport {format, parse} from 'date-fns';\nimport React from 'react';\nimport * as Icon from 'react-feather';\nimport ReactTooltip from 'react-tooltip';\n\nfunction StateMeta({\n  stateData,\n  lastTestObject,\n  population,\n  lastSevenDaysData,\n  totalData,\n}) {\n  const confirmed = stateData.confirmed;\n  const active = stateData.active;\n  const deaths = stateData.deaths;\n  const recovered = confirmed - active - deaths;\n  const sevenDayBeforeData = lastSevenDaysData[0].totalconfirmed;\n  const sevenDayBeforeDate = format(lastSevenDaysData[0].date, 'dd MMM');\n  const previousDayData = lastSevenDaysData[6].totalconfirmed;\n  const previousDayDate = format(lastSevenDaysData[6].date, 'dd MMM');\n  const confirmedPerMillion = (confirmed / population) * 1000000;\n  const recoveryPercent = (recovered / confirmed) * 100;\n  const activePercent = (active / confirmed) * 100;\n  const deathPercent = (deaths / confirmed) * 100;\n  const testPerMillion = (lastTestObject?.totaltested / population) * 1000000;\n  const growthRate =\n    ((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100;\n  const totalConfirmedPerMillion =\n    (totalData[0].confirmed / 1332900000) * 1000000;\n  // const doublingRate =\n  // growthRate > 0 ? (70 / Math.round(growthRate)).toFixed(2) : 0;\n\n  const updatedDate = !isNaN(\n    parse(lastTestObject?.updatedon, 'dd/MM/yyyy', new Date())\n  )\n    ? `As of ${format(\n        parse(lastTestObject?.updatedon, 'dd/MM/yyyy', new Date()),\n        'dd MMM'\n      )}`\n    : '';\n\n  return (\n    <React.Fragment>\n      <div className=\"StateMeta population\">\n        <ReactTooltip\n          place=\"top\"\n          type=\"dark\"\n          effect=\"solid\"\n          multiline={true}\n          scrollHide={true}\n          globalEventOff=\"click\"\n          id=\"stateMeta\"\n        />\n        <div className=\"meta-item population fadeInUp\">\n          <h3>Population</h3>\n          <h1>{formatNumber(population)}</h1>\n        </div>\n        <div className=\"alert\">\n          <Icon.Compass />\n          <div className=\"alert-right\">\n            Based on 2019 population projection by NCP{' '}\n            <a\n              href=\"https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\"\n              target=\"_noblank\"\n            >\n              report\n            </a>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"StateMeta\">\n        <StateMetaCard\n          className=\"confirmed\"\n          title={'Confirmed Per Million'}\n          statistic={confirmedPerMillion.toFixed(2)}\n          total={totalConfirmedPerMillion.toFixed(2)}\n          formula={'(confirmed / state population) * 1 Million'}\n          description={`\n            ${Math.round(\n              confirmedPerMillion\n            )} out of every 1 million people in ${\n            stateData.state\n          } have tested positive for the virus.\n            `}\n        />\n\n        <StateMetaCard\n          className=\"active\"\n          title={'Active'}\n          statistic={`${activePercent.toFixed(2)}%`}\n          formula={'(active / confirmed) * 100'}\n          description={`For every 100 confirmed cases, ${activePercent.toFixed(\n            0\n          )} are currently infected.`}\n        />\n\n        <StateMetaCard\n          className=\"recovery\"\n          title={'Recovery Rate'}\n          statistic={`${recoveryPercent.toFixed(2)}%`}\n          formula={'(recovered / confirmed) * 100'}\n          description={`For every 100 confirmed cases, \n            ${Math.round(\n              recoveryPercent.toFixed(0)\n            )} have recovered from the virus.`}\n        />\n\n        <StateMetaCard\n          className=\"mortality\"\n          title={'Mortality Rate'}\n          statistic={`${deathPercent.toFixed(2)}%`}\n          formula={'(deceased / confirmed) * 100'}\n          description={`For every 100 confirmed cases, \n            ${Math.round(\n              deathPercent.toFixed(0)\n            )} have unfortunately passed away from the virus.`}\n        />\n\n        <StateMetaCard\n          className=\"gr\"\n          title={'Avg. Growth Rate'}\n          statistic={growthRate > 0 ? `${Math.round(growthRate / 7)}%` : '-'}\n          formula={\n            '(((previousDayData - sevenDayBeforeData) / sevenDayBeforeData) * 100)/7'\n          }\n          date={`${sevenDayBeforeDate} - ${previousDayDate}`}\n          description={`In the last one week, the number of new infections has grown by an average of ${Math.round(\n            growthRate / 7\n          )}% every day.`}\n        />\n\n        <StateMetaCard\n          className=\"tpm\"\n          title={'Tests Per Million'}\n          statistic={`≈ ${Math.round(testPerMillion)}`}\n          formula={\n            '(total tests in state / total population of state) * 1 Million'\n          }\n          date={updatedDate}\n          description={`For every 1 million people in ${stateData.state},\n            ${Math.round(testPerMillion)} people were tested.`}\n        />\n\n        {/* <div className=\"meta-item ptr fadeInUp\">\n          <div className=\"meta-item-top\">\n            <h3>Positive Test Rate</h3>\n            <span\n              data-tip={\n                'TPM = (total tests in state / total population of state) * 1 Million'\n              }\n              data-event=\"touchstart mouseover\"\n              data-event-off=\"mouseleave\"\n              data-for=\"stateMeta\"\n            >\n              <Icon.Info />\n            </span>\n          </div>\n          <h1>\n            {lastTestObject?.testpositivityrate\n              ? lastTestObject.testpositivityrate\n              : 'N/A'}\n          </h1>\n          {updatedDate}\n          <p>\n            {lastTestObject?.testpositivityrate\n              ? `Out the of total tests conducted till date month, ${lastTestObject.testpositivityrate}% were positive for the virus`\n              : 'N/A'}\n          </p>\n        </div>*/}\n\n        {/*\n          <div className=\"meta-item dbr fadeInUp\">\n            <div className=\"meta-item-top\">\n              <h3>Doubling Rate</h3>\n              <Icon.Info />\n            </div>\n            <h1>\n              {doublingRate > 0 ? Math.round(doublingRate * 7) + ' Days' : '-'}\n            </h1>\n            <h6 style={{margin: '0'}}>\n              {sevenDayBeforeDate} - {previousDayDate}\n            </h6>\n          </div>\n        )*/}\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default StateMeta;\n","import Clusters from './clusters';\nimport DeltaBarGraph from './deltabargraph';\nimport Footer from './footer';\nimport Level from './level';\nimport MapExplorer from './mapexplorer';\nimport Minigraph from './minigraph';\nimport StateMeta from './statemeta';\nimport TimeSeriesExplorer from './timeseriesexplorer';\n\nimport {STATE_CODES, STATE_POPULATIONS} from '../constants';\nimport {\n  formatDateAbsolute,\n  formatNumber,\n  mergeTimeseries,\n  parseStateTimeseries,\n  parseStateTestTimeseries,\n  parseDistrictZones,\n} from '../utils/commonfunctions';\n\nimport Breadcrumb from '@primer/components/lib/Breadcrumb';\nimport Dropdown from '@primer/components/lib/Dropdown';\nimport anime from 'animejs';\nimport axios from 'axios';\nimport {format, parse} from 'date-fns';\nimport React, {useState} from 'react';\nimport * as Icon from 'react-feather';\nimport {Helmet} from 'react-helmet';\nimport {useTranslation} from 'react-i18next';\nimport {Link, useParams, Redirect} from 'react-router-dom';\nimport {useMeasure, useEffectOnce} from 'react-use';\n\nfunction PureBreadcrumbs({stateName, stateCode, fetched, allStateData}) {\n  const {t} = useTranslation();\n\n  return (\n    <div className=\"breadcrumb\">\n      <Breadcrumb>\n        <Breadcrumb.Item href=\"/\">{t('Home')}</Breadcrumb.Item>\n        <Dropdown direction=\"w\">\n          <summary>\n            <Breadcrumb.Item href={`${stateCode}`} selected>\n              {t(stateName)}\n            </Breadcrumb.Item>\n            <Dropdown.Caret className=\"caret\" />\n          </summary>\n          {fetched && (\n            <Dropdown.Menu direction=\"se\">\n              {allStateData.map((state) => (\n                <Dropdown.Item key={state.statecode} className=\"item\">\n                  <Link to={`${state.statecode}`}>\n                    {t(STATE_CODES[state.statecode])}\n                  </Link>\n                </Dropdown.Item>\n              ))}\n            </Dropdown.Menu>\n          )}\n        </Dropdown>\n      </Breadcrumb>\n    </div>\n  );\n}\n\nconst Breadcrumbs = React.memo(PureBreadcrumbs);\n\nfunction State(props) {\n  const stateCode = useParams().stateCode.toUpperCase();\n  const stateName = STATE_CODES[stateCode];\n\n  const [allStateData, setAllStateData] = useState({});\n  const [fetched, setFetched] = useState(false);\n  const [districtZones, setDistrictZones] = useState(null);\n  const [timeseries, setTimeseries] = useState({});\n  const [stateData, setStateData] = useState(null);\n  const [testData, setTestData] = useState({});\n  const [sources, setSources] = useState({});\n  const [districtData, setDistrictData] = useState({});\n  const [mapOption, setMapOption] = useState('confirmed');\n  const [mapSwitcher, {width}] = useMeasure();\n  const [showAllDistricts, setShowAllDistricts] = useState(false);\n  const [regionHighlighted, setRegionHighlighted] = useState({\n    state: stateName,\n  });\n\n  useEffectOnce(() => {\n    getState(stateCode);\n  });\n\n  const {t} = useTranslation();\n\n  const getState = async (code) => {\n    try {\n      const [\n        {data: dataResponse},\n        {data: stateDistrictWiseResponse},\n        {data: statesDailyResponse},\n        {data: stateTestResponse},\n        {data: sourcesResponse},\n        {data: zonesResponse},\n      ] = await Promise.all([\n        axios.get('https://api.covid19india.org/data.json'),\n        axios.get('https://api.covid19india.org/state_district_wise.json'),\n        axios.get('https://api.covid19india.org/states_daily.json'),\n        axios.get('https://api.covid19india.org/state_test_data.json'),\n        axios.get('https://api.covid19india.org/sources_list.json'),\n        axios.get('https://api.covid19india.org/zones.json'),\n      ]);\n      const name = STATE_CODES[code];\n\n      const states = dataResponse.statewise;\n      setAllStateData(states.filter((state) => state.statecode !== code));\n      setStateData([states.find((s) => s.statecode === code)]);\n      // Timeseries\n      const ts = parseStateTimeseries(statesDailyResponse)[code];\n      const testTs = parseStateTestTimeseries(\n        stateTestResponse.states_tested_data\n      )[code];\n      // Merge\n      const tsMerged = mergeTimeseries({[code]: ts}, {[code]: testTs});\n      setTimeseries(tsMerged[code]);\n      // District data\n      setDistrictData({\n        [name]: stateDistrictWiseResponse[name],\n      });\n      const sourceList = sourcesResponse.sources_list;\n      setSources(sourceList.filter((state) => state.statecode === code));\n\n      const statesTests = stateTestResponse.states_tested_data;\n      setTestData(\n        statesTests.filter(\n          (obj) => obj.state === name && obj.totaltested !== ''\n        )\n      );\n\n      setDistrictZones(parseDistrictZones(zonesResponse.zones, stateName));\n\n      setFetched(true);\n      anime({\n        targets: '.highlight',\n        duration: 200,\n        delay: 3000,\n        translateX:\n          mapOption === 'confirmed'\n            ? `${width * 0}px`\n            : mapOption === 'active'\n            ? `${width * 0.25}px`\n            : mapOption === 'recovered'\n            ? `${width * 0.5}px`\n            : mapOption === 'deceased'\n            ? `${width * 0.75}px`\n            : '0px',\n        easing: 'spring(1, 80, 90, 10)',\n        opacity: 1,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const testObjLast = testData[testData.length - 1];\n  const population = STATE_POPULATIONS[stateName];\n\n  function toggleShowAllDistricts() {\n    setShowAllDistricts(!showAllDistricts);\n  }\n\n  const getGridRowCount = () => {\n    const gridColumnCount = window.innerWidth >= 540 ? 3 : 2;\n    const districtCount =\n      (districtData[stateName] &&\n        Object.keys(districtData[stateName].districtData).length) ||\n      0;\n    const gridRowCount = Math.ceil(districtCount / gridColumnCount);\n    return gridRowCount;\n  };\n  const gridRowCount = getGridRowCount();\n\n  if (!stateName) {\n    return <Redirect to=\"/\" />;\n  } else {\n    return (\n      <React.Fragment>\n        <Helmet>\n          <title>\n            Coronavirus Outbreak in {STATE_CODES[stateCode]} - covid19india.org\n          </title>\n          <meta\n            name=\"title\"\n            content={`Coronavirus Outbreak in ${STATE_CODES[stateCode]}: Latest Map and Case Count`}\n          />\n        </Helmet>\n\n        <div className=\"State\">\n          <div className=\"state-left\">\n            <Breadcrumbs\n              stateName={stateName}\n              stateCode={stateCode}\n              fetched={fetched}\n              allStateData={allStateData}\n            />\n\n            <div className=\"header\">\n              <div\n                className=\"header-left fadeInUp\"\n                style={{animationDelay: '0.3s'}}\n              >\n                <h1>{t(stateName)}</h1>\n                <h5>\n                  Last Updated on{' '}\n                  {stateData && Object.keys(stateData[0]).length\n                    ? formatDateAbsolute(stateData[0].lastupdatedtime)\n                    : ''}\n                </h5>\n              </div>\n\n              <div\n                className=\"header-right fadeInUp\"\n                style={{animationDelay: '0.5s'}}\n              >\n                <h5>{t('Tested')}</h5>\n                <h2>{formatNumber(testObjLast?.totaltested)}</h2>\n                <h5 className=\"timestamp\">\n                  {!isNaN(\n                    parse(testObjLast?.updatedon, 'dd/MM/yyyy', new Date())\n                  )\n                    ? `As of ${format(\n                        parse(testObjLast?.updatedon, 'dd/MM/yyyy', new Date()),\n                        'dd MMM'\n                      )}`\n                    : ''}\n                </h5>\n                <h5>\n                  {'per '}\n                  {testObjLast?.totaltested && (\n                    <a href={testObjLast.source} target=\"_noblank\">\n                      source\n                    </a>\n                  )}\n                </h5>\n              </div>\n            </div>\n\n            {fetched && (\n              <div className=\"map-switcher\" ref={mapSwitcher}>\n                <div\n                  className={`highlight ${mapOption}`}\n                  style={{\n                    transform: `translateX(${width * 0}px)`,\n                    opacity: 0,\n                  }}\n                ></div>\n                <div\n                  className=\"clickable\"\n                  onClick={() => {\n                    setMapOption('confirmed');\n                    anime({\n                      targets: '.highlight',\n                      translateX: `${width * 0}px`,\n                      easing: 'spring(1, 80, 90, 10)',\n                    });\n                  }}\n                ></div>\n                <div\n                  className=\"clickable\"\n                  onClick={() => {\n                    setMapOption('active');\n                    anime({\n                      targets: '.highlight',\n                      translateX: `${width * 0.25}px`,\n                      easing: 'spring(1, 80, 90, 10)',\n                    });\n                  }}\n                ></div>\n                <div\n                  className=\"clickable\"\n                  onClick={() => {\n                    setMapOption('recovered');\n                    anime({\n                      targets: '.highlight',\n                      translateX: `${width * 0.5}px`,\n                      easing: 'spring(1, 80, 90, 10)',\n                    });\n                  }}\n                ></div>\n                <div\n                  className=\"clickable\"\n                  onClick={() => {\n                    setMapOption('deceased');\n                    anime({\n                      targets: '.highlight',\n                      translateX: `${width * 0.75}px`,\n                      easing: 'spring(1, 80, 90, 10)',\n                    });\n                  }}\n                ></div>\n              </div>\n            )}\n\n            {fetched && <Level data={stateData[0]} />}\n            {fetched && <Minigraph timeseries={timeseries} />}\n            {fetched && (\n              <MapExplorer\n                mapName={stateName}\n                states={stateData}\n                districts={districtData}\n                zones={districtZones}\n                stateTestData={testData}\n                regionHighlighted={regionHighlighted}\n                setRegionHighlighted={setRegionHighlighted}\n                mapOption={mapOption}\n                isCountryLoaded={false}\n              />\n            )}\n\n            {fetched && (\n              <div className=\"meta-secondary\">\n                <div className=\"alert\">\n                  <Icon.AlertCircle />\n                  <div className=\"alert-right\">\n                    Awaiting district details for{' '}\n                    {districtData[stateName]?.districtData['Unknown']\n                      ?.confirmed || '0'}{' '}\n                    cases\n                  </div>\n                </div>\n                <div className=\"alert\">\n                  <Icon.Compass />\n                  <div className=\"alert-right\">\n                    Data collected from sources{' '}\n                    {sources.length > 0\n                      ? Object.keys(sources[0]).map((key, index) => {\n                          if (key.match('source') && sources[0][key] !== '') {\n                            const num = key.match(/\\d+/);\n                            return (\n                              <React.Fragment key={index}>\n                                {num > 1 ? ',' : ''}\n                                <a href={sources[0][key]}>{num}</a>\n                              </React.Fragment>\n                            );\n                          }\n                          return null;\n                        })\n                      : ''}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {fetched && (\n              <StateMeta\n                stateData={stateData[0]}\n                lastTestObject={testObjLast}\n                population={population}\n                lastSevenDaysData={timeseries.slice(-7)}\n                totalData={allStateData.filter(\n                  (state) => state.statecode === 'TT'\n                )}\n              />\n            )}\n\n            {fetched && (\n              <div\n                className=\"Clusters fadeInUp\"\n                style={{animationDelay: '0.8s'}}\n              >\n                <h1>Network of Transmission</h1>\n                <Clusters stateCode={stateCode} />\n              </div>\n            )}\n          </div>\n\n          <div className=\"state-right\">\n            {fetched && (\n              <React.Fragment>\n                <div\n                  className=\"district-bar\"\n                  style={!showAllDistricts ? {display: 'flex'} : {}}\n                >\n                  <div\n                    className=\"district-bar-left fadeInUp\"\n                    style={{animationDelay: '0.6s'}}\n                  >\n                    <h2 className={mapOption}>Top districts</h2>\n                    <div\n                      className={`districts ${\n                        showAllDistricts ? 'is-grid' : ''\n                      }`}\n                      style={\n                        showAllDistricts\n                          ? {gridTemplateRows: `repeat(${gridRowCount}, 2rem)`}\n                          : {}\n                      }\n                    >\n                      {districtData[stateName]\n                        ? Object.keys(districtData[stateName].districtData)\n                            .filter((d) => d !== 'Unknown')\n                            .sort((a, b) => {\n                              const districtB =\n                                districtData[stateName].districtData[b];\n                              const districtA =\n                                districtData[stateName].districtData[a];\n                              return (\n                                districtB[mapOption] - districtA[mapOption]\n                              );\n                            })\n                            .slice(0, showAllDistricts ? undefined : 5)\n                            .map((district, index) => {\n                              const cases =\n                                districtData[stateName].districtData[district];\n                              return (\n                                <div key={index} className=\"district\">\n                                  <h2>{cases[mapOption]}</h2>\n                                  <h5>{t(district)}</h5>\n                                  {mapOption !== 'active' && (\n                                    <div className=\"delta\">\n                                      <Icon.ArrowUp className={mapOption} />\n                                      <h6 className={mapOption}>\n                                        {cases.delta[mapOption]}\n                                      </h6>\n                                    </div>\n                                  )}\n                                </div>\n                              );\n                            })\n                        : ''}\n                    </div>\n                    {districtData[stateName] &&\n                      Object.keys(districtData[stateName].districtData).length >\n                        5 && (\n                        <button\n                          className=\"button\"\n                          onClick={toggleShowAllDistricts}\n                        >\n                          {showAllDistricts ? `View less` : `View all`}\n                        </button>\n                      )}\n                  </div>\n                  <div className=\"district-bar-right\">\n                    {(mapOption === 'confirmed' ||\n                      mapOption === 'deceased') && (\n                      <div\n                        className=\"happy-sign fadeInUp\"\n                        style={{animationDelay: '0.6s'}}\n                      >\n                        {timeseries\n                          .slice(-5)\n                          .every((day) => day[`daily${mapOption}`] === 0) && (\n                          <div\n                            className={`alert ${\n                              mapOption === 'confirmed' ? 'is-green' : ''\n                            }`}\n                          >\n                            <Icon.Smile />\n                            <div className=\"alert-right\">\n                              No new {mapOption} cases in the past five days\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                    {\n                      <DeltaBarGraph\n                        timeseries={timeseries.slice(-5)}\n                        arrayKey={`daily${mapOption}`}\n                      />\n                    }\n                  </div>\n                </div>\n                <TimeSeriesExplorer timeseries={timeseries} />\n              </React.Fragment>\n            )}\n          </div>\n        </div>\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default React.memo(State);\n"],"sourceRoot":""}