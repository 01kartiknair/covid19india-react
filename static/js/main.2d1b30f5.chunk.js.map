{"version":3,"sources":["constants.js","utils/commonfunctions.js","components/navbar.js","utils/ScrollToTop.js","App.js","i18n/index.js","serviceWorker.js","index.js"],"names":["STATE_ROW_STATISTICS","DISTRICT_ROW_STATISTICS","MAP_TYPES","COUNTRY","STATE","DISTRICT","MAP_STATISTICS","TOTAL","PER_MILLION","ZONE","MAP_VIEWS","STATES","DISTRICTS","MAPS_DIR","MAP_META","India","geoDataFile","mapType","graphObjectStates","graphObjectDistricts","Assam","Bihar","name","Chandigarh","Chhattisgarh","Delhi","Karnataka","Kerala","Goa","Gujarat","Haryana","Jharkhand","Ladakh","Lakshadweep","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland","Odisha","Puducherry","Punjab","Rajasthan","Sikkim","Telangana","Tripura","Uttarakhand","STATE_CODES","AP","AR","AS","BR","CT","GA","GJ","HR","HP","JH","KA","KL","MP","MH","MN","ML","MZ","NL","OR","PB","RJ","SK","TN","TG","TR","UT","UP","WB","AN","CH","DN","DL","JK","LA","LD","PY","stateCodes","reverseStateCodes","Object","keys","map","key","index","push","code","STATE_CODES_REVERSE","STATE_CODES_ARRAY","STATE_POPULATIONS","Total","RAW_DATA_PARTITIONS","v1","start","Date","end","v2","v3","v4","months","isDevelopmentOrTest","getStateName","toUpperCase","getIndiaDay","startOfDay","utcToZonedTime","formatDate","unformattedDate","day","slice","month","year","time","formatDateAbsolute","preprocessTimeseries","timeseries","data","dataTypes","filter","d","every","dt","date","Number","today","parse","isBefore","validateCTS","stat","totalconfirmed","totalrecovered","totaldeceased","dailyconfirmed","dailyrecovered","dailydeceased","totalactive","dailyactive","sliceTimeseriesFromEnd","days","formatNumber","value","numberFormatter","Intl","NumberFormat","isNaN","format","parseStateTimeseries","states_daily","statewiseSeries","reduce","a","c","i","entries","forEach","k","v","stateCode","toLowerCase","prev","length","parseStateTestTimeseries","testTimseries","ret","sc","updatedon","totaltested","state","dailytested","stateTs","differenceInDays","NaN","parseTotalTestTimeseries","updatetimestamp","split","totalsamplestested","isSameDay","mergeTimeseries","ts1","ts2","tsRet","assign","hasOwnProperty","d1","testData","find","d2","capitalize","s","charAt","capitalizeAll","str","join","abbreviate","replace","parseDistrictZones","zones","district","values","activeNavIcon","path","style","stroke","window","location","pathname","Expand","expand","pages","setExpand","expandElement","useRef","t","useTranslation","useEffectOnce","anime","targets","current","translateX","easing","duration","className","ref","onMouseLeave","page","showInNavbar","to","pageLink","onClick","animationDelay","animationDelayForNavbar","displayName","Navbar","darkMode","setDarkMode","useState","useLocalStorage","setIsThemeSet","useLockBodyScroll","windowSize","useWindowSize","prevMode","color","onMouseEnter","innerWidth","width","Fragment","ScrollToTop","useLocation","useEffect","scrollTo","Home","lazy","DeepDive","FAQ","Demographics","State","Essentials","schemaMarkup","alternateName","url","image","App","view","isThemeSet","matchMedia","matches","React","document","querySelector","classList","add","remove","Helmet","type","JSON","stringify","fallback","render","exact","match","params","i18n","use","Backend","LanguageDetector","initReactI18next","init","debug","lng","fallbackLng","backend","loadPath","addPath","saveMissing","interpolation","escapeValue","Boolean","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2d1b30f5.chunk.js","sourcesContent":["export const STATE_ROW_STATISTICS = [\n  'confirmed',\n  'active',\n  'recovered',\n  'deaths',\n];\nexport const DISTRICT_ROW_STATISTICS = [\n  'confirmed',\n  'active',\n  'recovered',\n  'deceased',\n];\n\nexport const MAP_TYPES = {\n  COUNTRY: 'country',\n  STATE: 'state',\n  DISTRICT: 'district',\n};\n\nexport const MAP_STATISTICS = {\n  TOTAL: 0,\n  PER_MILLION: 1,\n  ZONE: 2,\n};\n\nexport const MAP_VIEWS = {\n  STATES: 0,\n  DISTRICTS: 1,\n};\n\nexport const MAPS_DIR =\n  process.env.NODE_ENV === 'production' ? '/mini_maps' : '/maps';\n\nexport const MAP_META = {\n  India: {\n    geoDataFile: `${MAPS_DIR}/india.json`,\n    mapType: MAP_TYPES.COUNTRY,\n    graphObjectStates: 'india-states',\n    graphObjectDistricts: 'india-districts-2019-734',\n  },\n  'Andaman and Nicobar Islands': {\n    geoDataFile: `${MAPS_DIR}/andamannicobarislands.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'andamannicobarislands_district',\n  },\n  'Arunachal Pradesh': {\n    geoDataFile: `${MAPS_DIR}/arunachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'arunachalpradesh_district',\n  },\n  'Andhra Pradesh': {\n    geoDataFile: `${MAPS_DIR}/andhrapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'andhrapradesh_district',\n  },\n  Assam: {\n    geoDataFile: `${MAPS_DIR}/assam.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'assam_district',\n  },\n  Bihar: {\n    name: 'Bihar',\n    geoDataFile: `${MAPS_DIR}/bihar.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'bihar_district',\n  },\n  Chandigarh: {\n    name: 'Chandigarh',\n    geoDataFile: `${MAPS_DIR}/chandigarh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'chandigarh_district',\n  },\n  Chhattisgarh: {\n    name: 'Chhattisgarh',\n    geoDataFile: `${MAPS_DIR}/chhattisgarh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'chhattisgarh_district',\n  },\n  'Dadra and Nagar Haveli and Daman and Diu': {\n    geoDataFile: `${MAPS_DIR}/dnh-and-dd.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'dnh-and-dd',\n  },\n  Delhi: {\n    geoDataFile: `${MAPS_DIR}/delhi.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'delhi_district',\n  },\n  Karnataka: {\n    geoDataFile: `${MAPS_DIR}/karnataka.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'karnataka_district',\n  },\n  Kerala: {\n    geoDataFile: `${MAPS_DIR}/kerala.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'kerala_district',\n  },\n  Goa: {\n    geoDataFile: `${MAPS_DIR}/goa.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'goa_district',\n  },\n  Gujarat: {\n    geoDataFile: `${MAPS_DIR}/gujarat.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'gujarat_district',\n  },\n  Haryana: {\n    geoDataFile: `${MAPS_DIR}/haryana.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'haryana_district',\n  },\n  'Himachal Pradesh': {\n    geoDataFile: `${MAPS_DIR}/himachalpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'himachalpradesh_district',\n  },\n  'Jammu and Kashmir': {\n    geoDataFile: `${MAPS_DIR}/jammukashmir.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'jammukashmir_district',\n  },\n  Jharkhand: {\n    geoDataFile: `${MAPS_DIR}/jharkhand.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'jharkhand_district',\n  },\n  Ladakh: {\n    geoDataFile: `${MAPS_DIR}/ladakh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'ladakh_district',\n  },\n  Lakshadweep: {\n    geoDataFile: `${MAPS_DIR}/lakshadweep.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'lakshadweep_district',\n  },\n  'Madhya Pradesh': {\n    geoDataFile: `${MAPS_DIR}/madhyapradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'madhyapradesh_district',\n  },\n  Maharashtra: {\n    geoDataFile: `${MAPS_DIR}/maharashtra.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'maharashtra_district',\n  },\n  Manipur: {\n    geoDataFile: `${MAPS_DIR}/manipur.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'manipur_district',\n  },\n  Meghalaya: {\n    geoDataFile: `${MAPS_DIR}/meghalaya.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'meghalaya_district',\n  },\n  Mizoram: {\n    geoDataFile: `${MAPS_DIR}/mizoram.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'mizoram_district',\n  },\n  Nagaland: {\n    geoDataFile: `${MAPS_DIR}/nagaland.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'nagaland_district',\n  },\n  Odisha: {\n    geoDataFile: `${MAPS_DIR}/odisha.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'odisha_district',\n  },\n  Puducherry: {\n    geoDataFile: `${MAPS_DIR}/puducherry.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'puducherry_district',\n  },\n  Punjab: {\n    geoDataFile: `${MAPS_DIR}/punjab.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'punjab_district',\n  },\n  Rajasthan: {\n    geoDataFile: `${MAPS_DIR}/rajasthan.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'rajasthan_district',\n  },\n  Sikkim: {\n    geoDataFile: `${MAPS_DIR}/sikkim.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'sikkim_district',\n  },\n  'Tamil Nadu': {\n    geoDataFile: `${MAPS_DIR}/tamilnadu.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'tamilnadu_district',\n  },\n  Telangana: {\n    geoDataFile: `${MAPS_DIR}/telangana.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'telangana_district',\n  },\n  Tripura: {\n    geoDataFile: `${MAPS_DIR}/tripura.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'tripura_district',\n  },\n  Uttarakhand: {\n    geoDataFile: `${MAPS_DIR}/uttarakhand.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'uttarakhand_district',\n  },\n  'Uttar Pradesh': {\n    geoDataFile: `${MAPS_DIR}/uttarpradesh.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'uttarpradesh_district',\n  },\n\n  'West Bengal': {\n    geoDataFile: `${MAPS_DIR}/westbengal.json`,\n    mapType: MAP_TYPES.STATE,\n    graphObjectDistricts: 'westbengal_district',\n  },\n};\n\nexport const STATE_CODES = {\n  AP: 'Andhra Pradesh',\n  AR: 'Arunachal Pradesh',\n  AS: 'Assam',\n  BR: 'Bihar',\n  CT: 'Chhattisgarh',\n  GA: 'Goa',\n  GJ: 'Gujarat',\n  HR: 'Haryana',\n  HP: 'Himachal Pradesh',\n  JH: 'Jharkhand',\n  KA: 'Karnataka',\n  KL: 'Kerala',\n  MP: 'Madhya Pradesh',\n  MH: 'Maharashtra',\n  MN: 'Manipur',\n  ML: 'Meghalaya',\n  MZ: 'Mizoram',\n  NL: 'Nagaland',\n  OR: 'Odisha',\n  PB: 'Punjab',\n  RJ: 'Rajasthan',\n  SK: 'Sikkim',\n  TN: 'Tamil Nadu',\n  TG: 'Telangana',\n  TR: 'Tripura',\n  UT: 'Uttarakhand',\n  UP: 'Uttar Pradesh',\n  WB: 'West Bengal',\n  AN: 'Andaman and Nicobar Islands',\n  CH: 'Chandigarh',\n  DN: 'Dadra and Nagar Haveli and Daman and Diu',\n  DL: 'Delhi',\n  JK: 'Jammu and Kashmir',\n  LA: 'Ladakh',\n  LD: 'Lakshadweep',\n  PY: 'Puducherry',\n};\n\nconst stateCodes = [];\nconst reverseStateCodes = {};\nObject.keys(STATE_CODES).map((key, index) => {\n  reverseStateCodes[STATE_CODES[key]] = key;\n  stateCodes.push({code: key, name: STATE_CODES[key]});\n  return null;\n});\nexport const STATE_CODES_REVERSE = reverseStateCodes;\nexport const STATE_CODES_ARRAY = stateCodes;\n\n// Source: Projected Populations (2019)\n// National Commission on Population, \"Population Projections for India and\n// States (2011-2036)\", Table-8 (p43), November 2019\n// https://nhm.gov.in/New_Updates_2018/Report_Population_Projection_2019.pdf\nexport const STATE_POPULATIONS = {\n  'Andaman and Nicobar Islands': 397000,\n  'Andhra Pradesh': 52221000,\n  'Arunachal Pradesh': 1504000,\n  Assam: 34293000,\n  Bihar: 119520000,\n  Chandigarh: 1179000,\n  Chhattisgarh: 28724000,\n  'Dadra and Nagar Haveli and Daman and Diu': 959000,\n  Delhi: 19814000,\n  Goa: 1540000,\n  Gujarat: 67936000,\n  Haryana: 28672000,\n  'Himachal Pradesh': 7300000,\n  'Jammu and Kashmir': 13203000,\n  Jharkhand: 37403000,\n  Karnataka: 65798000,\n  Kerala: 35125000,\n  Ladakh: 293000,\n  Lakshadweep: 68000,\n  'Madhya Pradesh': 82232000,\n  Maharashtra: 122153000,\n  Manipur: 3103000,\n  Meghalaya: 3224000,\n  Mizoram: 1192000,\n  Nagaland: 2150000,\n  Odisha: 43671000,\n  Puducherry: 1504000,\n  Punjab: 29859000,\n  Rajasthan: 77264000,\n  Sikkim: 664000,\n  'Tamil Nadu': 75695000,\n  Telangana: 37220000,\n  Tripura: 3992000,\n  'Uttar Pradesh': 224979000,\n  Uttarakhand: 11141000,\n  'West Bengal': 96906000,\n  Total: 1332900000,\n};\n\nexport const RAW_DATA_PARTITIONS = {\n  v1: {\n    start: new Date(2020, 0, 1),\n    end: new Date(2020, 3, 19),\n  },\n  v2: {\n    start: new Date(2020, 3, 20),\n    end: new Date(2020, 3, 26),\n  },\n  v3: {\n    start: new Date(2020, 3, 27),\n    end: new Date(2020, 4, 9),\n  },\n  v4: {\n    start: new Date(2020, 4, 10),\n    end: new Date(),\n  },\n};\n","import {STATE_CODES, STATE_CODES_REVERSE} from '../constants';\n\nimport {\n  parse,\n  differenceInDays,\n  isBefore,\n  isSameDay,\n  startOfDay,\n} from 'date-fns';\nimport {utcToZonedTime} from 'date-fns-tz';\n\nconst months = {\n  '01': 'Jan',\n  '02': 'Feb',\n  '03': 'Mar',\n  '04': 'Apr',\n  '05': 'May',\n  '06': 'Jun',\n  '07': 'Jul',\n  '08': 'Aug',\n  '09': 'Sep',\n  '10': 'Oct',\n  '11': 'Nov',\n  '12': 'Dec',\n};\n\nexport const isDevelopmentOrTest = () => {\n  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test')\n    return true;\n  return false;\n};\n\nexport const getStateName = (code) => {\n  return STATE_CODES[code.toUpperCase()];\n};\n\nexport const getIndiaDay = () => {\n  return startOfDay(utcToZonedTime(new Date(), 'Asia/Kolkata'));\n};\n\nexport const formatDate = (unformattedDate) => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const year = unformattedDate.slice(6, 10);\n  const time = unformattedDate.slice(11);\n  return `${year}-${month}-${day}T${time}+05:30`;\n};\n\nexport const formatDateAbsolute = (unformattedDate) => {\n  const day = unformattedDate.slice(0, 2);\n  const month = unformattedDate.slice(3, 5);\n  const time = unformattedDate.slice(11);\n  return `${day} ${months[month]}, ${time.slice(0, 5)} IST`;\n};\n\nconst validateCTS = (data = []) => {\n  const dataTypes = [\n    'dailyconfirmed',\n    'dailydeceased',\n    'dailyrecovered',\n    'totalconfirmed',\n    'totaldeceased',\n    'totalrecovered',\n  ];\n  return data\n    .filter((d) => dataTypes.every((dt) => d[dt]) && d.date)\n    .filter((d) => dataTypes.every((dt) => Number(d[dt]) >= 0))\n    .filter((d) => {\n      // Skip data from the current day\n      const today = getIndiaDay();\n      const date = parse(d.date, 'dd MMMM', new Date(2020, 0, 1));\n      return isBefore(date, today);\n    });\n};\n\nexport const preprocessTimeseries = (timeseries) => {\n  return validateCTS(timeseries).map((stat, index) => ({\n    date: parse(stat.date, 'dd MMMM', new Date(2020, 0, 1)),\n    totalconfirmed: +stat.totalconfirmed,\n    totalrecovered: +stat.totalrecovered,\n    totaldeceased: +stat.totaldeceased,\n    dailyconfirmed: +stat.dailyconfirmed,\n    dailyrecovered: +stat.dailyrecovered,\n    dailydeceased: +stat.dailydeceased,\n    // Active = Confimed - Recovered - Deceased\n    totalactive:\n      +stat.totalconfirmed - +stat.totalrecovered - +stat.totaldeceased,\n    dailyactive:\n      +stat.dailyconfirmed - +stat.dailyrecovered - +stat.dailydeceased,\n  }));\n};\n\n/**\n * Returns the last `days` entries\n * @param {Array<Object>} timeseries\n * @param {number} days\n *\n * @return {Array<Object>}\n */\nexport function sliceTimeseriesFromEnd(timeseries, days) {\n  return timeseries.slice(-days);\n}\n\nexport const formatNumber = (value) => {\n  const numberFormatter = new Intl.NumberFormat('en-IN');\n  return isNaN(value) ? '-' : numberFormatter.format(value);\n};\n\nexport const parseStateTimeseries = ({states_daily: data}) => {\n  const statewiseSeries = Object.keys(STATE_CODES).reduce((a, c) => {\n    a[c] = [];\n    return a;\n  }, {});\n\n  const today = getIndiaDay();\n  for (let i = 0; i < data.length; i += 3) {\n    const date = parse(data[i].date, 'dd-MMM-yy', new Date());\n    // Skip data from the current day\n    if (isBefore(date, today)) {\n      Object.entries(statewiseSeries).forEach(([k, v]) => {\n        const stateCode = k.toLowerCase();\n        const prev = v[v.length - 1] || {};\n        // Parser\n        const dailyconfirmed = +data[i][stateCode] || 0;\n        const dailyrecovered = +data[i + 1][stateCode] || 0;\n        const dailydeceased = +data[i + 2][stateCode] || 0;\n        const totalconfirmed = +data[i][stateCode] + (prev.totalconfirmed || 0);\n        const totalrecovered =\n          +data[i + 1][stateCode] + (prev.totalrecovered || 0);\n        const totaldeceased =\n          +data[i + 2][stateCode] + (prev.totaldeceased || 0);\n        // Push\n        v.push({\n          date: date,\n          dailyconfirmed: dailyconfirmed,\n          dailyrecovered: dailyrecovered,\n          dailydeceased: dailydeceased,\n          totalconfirmed: totalconfirmed,\n          totalrecovered: totalrecovered,\n          totaldeceased: totaldeceased,\n          // Active = Confimed - Recovered - Deceased\n          totalactive: totalconfirmed - totalrecovered - totaldeceased,\n          dailyactive: dailyconfirmed - dailyrecovered - dailydeceased,\n        });\n      });\n    }\n  }\n\n  return statewiseSeries;\n};\n\nexport const parseStateTestTimeseries = (data) => {\n  const testTimseries = Object.keys(STATE_CODES).reduce((ret, sc) => {\n    ret[sc] = [];\n    return ret;\n  }, {});\n\n  const today = getIndiaDay();\n  data.forEach((d) => {\n    const date = parse(d.updatedon, 'dd/MM/yyyy', new Date());\n    const totaltested = +d.totaltested;\n    const stateCode = STATE_CODES_REVERSE[d.state];\n    if (stateCode && isBefore(date, today) && totaltested) {\n      const stateTs = testTimseries[stateCode];\n      let dailytested;\n      if (stateTs.length) {\n        const prev = stateTs[stateTs.length - 1];\n        dailytested =\n          differenceInDays(date, prev.date) === 1\n            ? totaltested - prev.totaltested\n            : NaN;\n      } else dailytested = NaN;\n      stateTs.push({\n        date: date,\n        totaltested: totaltested,\n        dailytested: dailytested,\n      });\n    }\n  });\n  return testTimseries;\n};\n\nexport const parseTotalTestTimeseries = (data) => {\n  const testTimseries = [];\n  const today = getIndiaDay();\n  data.forEach((d) => {\n    const date = parse(\n      d.updatetimestamp.split(' ')[0],\n      'dd/MM/yyyy',\n      new Date()\n    );\n    const totaltested = +d.totalsamplestested;\n    if (isBefore(date, today) && totaltested) {\n      let dailytested;\n      if (testTimseries.length) {\n        const prev = testTimseries[testTimseries.length - 1];\n        if (isSameDay(date, prev.date)) {\n          prev.dailytested += totaltested - prev.totaltested;\n          prev.totaltested = totaltested;\n        } else {\n          if (differenceInDays(date, prev.date) === 1)\n            dailytested = totaltested - prev.totaltested;\n          else dailytested = NaN;\n        }\n      } else dailytested = NaN;\n      testTimseries.push({\n        date: date,\n        totaltested: totaltested,\n        dailytested: dailytested,\n      });\n    }\n  });\n  return testTimseries;\n};\n\nexport const mergeTimeseries = (ts1, ts2) => {\n  const tsRet = Object.assign({}, ts1);\n  for (const state in ts1) {\n    if (ts1.hasOwnProperty(state)) {\n      tsRet[state] = ts1[state].map((d1) => {\n        const testData = ts2[state].find((d2) => isSameDay(d1.date, d2.date));\n        return {\n          totaltested: testData?.totaltested,\n          dailytested: testData?.dailytested,\n          ...d1,\n        };\n      });\n    }\n  }\n  return tsRet;\n};\n\nexport const capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport const capitalizeAll = (s) => {\n  if (typeof s !== 'string') return '';\n  const str = s.toLowerCase().split(' ');\n  for (let i = 0; i < str.length; i++) {\n    str[i] = capitalize(str[i]);\n  }\n  return str.join(' ');\n};\n\nexport const abbreviate = (s) => {\n  return s.slice(0, 1) + s.slice(1).replace(/[aeiou]/gi, '');\n};\n\nexport const parseDistrictZones = (data, state) => {\n  const zones = data.reduce((ret, d) => {\n    ret[d.state] = ret[d.state] || {};\n    ret[d.state][d.district] = d;\n    return ret;\n  }, {});\n  Object.values(STATE_CODES).forEach((state) => {\n    if (!zones[state]) zones[state] = {};\n  });\n  return state ? {[state]: zones[state]} : zones;\n};\n\nexport const toTitleCase = (str) => {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n};\n","import anime from 'animejs';\nimport React, {useState, useRef} from 'react';\nimport * as Icon from 'react-feather';\nimport {useTranslation} from 'react-i18next';\nimport {Link} from 'react-router-dom';\nimport {\n  useEffectOnce,\n  useLockBodyScroll,\n  useWindowSize,\n  useLocalStorage,\n} from 'react-use';\n\nconst navLinkProps = (path, animationDelay) => ({\n  className: `fadeInUp ${window.location.pathname === path ? 'focused' : ''}`,\n  style: {\n    animationDelay: `${animationDelay}s`,\n  },\n});\n\nconst activeNavIcon = (path) => ({\n  style: {\n    stroke: window.location.pathname === path ? '#4c75f2' : '',\n  },\n});\n\nfunction Navbar({pages, darkMode, setDarkMode}) {\n  const [expand, setExpand] = useState(false);\n  // eslint-disable-next-line\n  const [isThemeSet, setIsThemeSet] = useLocalStorage('isThemeSet', false);\n\n  useLockBodyScroll(expand);\n  const windowSize = useWindowSize();\n\n  return (\n    <div className=\"Navbar\">\n      <div\n        className=\"navbar-left\"\n        onClick={() => {\n          setDarkMode((prevMode) => !prevMode);\n          setIsThemeSet(true);\n        }}\n      >\n        {darkMode ? <Icon.Sun color={'#ffc107'} /> : <Icon.Moon />}\n      </div>\n      <div className=\"navbar-middle\">\n        <Link\n          to=\"/\"\n          onClick={() => {\n            setExpand(false);\n          }}\n        >\n          Covid19<span>India</span>\n        </Link>\n      </div>\n\n      <div\n        className=\"navbar-right\"\n        onClick={() => {\n          setExpand(!expand);\n        }}\n        onMouseEnter={() => {\n          if (window.innerWidth > 769) {\n            setExpand(true);\n          }\n        }}\n      >\n        {windowSize.width < 769 && <span>{expand ? 'Close' : 'Menu'}</span>}\n        {windowSize.width > 769 && (\n          <React.Fragment>\n            <span>\n              <Link to=\"/\">\n                <Icon.Home {...activeNavIcon('/')} />\n              </Link>\n            </span>\n            <span>\n              <Link to=\"/demographics\">\n                <Icon.Users {...activeNavIcon('/demographics')} />\n              </Link>\n            </span>\n            <span>\n              <Link to=\"/deepdive\">\n                <Icon.BarChart2 {...activeNavIcon('/deepdive')} />\n              </Link>\n            </span>\n            <span>\n              <Link to=\"/essentials\">\n                <Icon.Package {...activeNavIcon('/essentials')} />\n              </Link>\n            </span>\n            <span>\n              <Link to=\"/about\">\n                <Icon.HelpCircle {...activeNavIcon('/about')} />\n              </Link>\n            </span>\n          </React.Fragment>\n        )}\n      </div>\n\n      {expand && <Expand expand={expand} pages={pages} setExpand={setExpand} />}\n    </div>\n  );\n}\n\nfunction Expand({expand, pages, setExpand}) {\n  const expandElement = useRef(null);\n  const {t} = useTranslation();\n\n  useEffectOnce(() => {\n    anime({\n      targets: expandElement.current,\n      translateX: '10rem',\n      easing: 'easeOutExpo',\n      duration: 250,\n    });\n  });\n\n  return (\n    <div\n      className=\"expand\"\n      ref={expandElement}\n      onMouseLeave={() => {\n        setExpand(false);\n      }}\n    >\n      {pages.map((page, i) => {\n        if (page.showInNavbar === true) {\n          return (\n            <Link\n              to={page.pageLink}\n              key={i}\n              onClick={() => {\n                setExpand(false);\n              }}\n            >\n              <span\n                {...navLinkProps(page.pageLink, page.animationDelayForNavbar)}\n              >\n                {t(page.displayName)}\n              </span>\n            </Link>\n          );\n        }\n        return null;\n      })}\n\n      <div className=\"expand-bottom fadeInUp\" style={{animationDelay: '1s'}}>\n        <h5>{t('A crowdsourced initiative.')}</h5>\n      </div>\n    </div>\n  );\n}\n\nexport default Navbar;\n","import {useEffect} from 'react';\nimport {useLocation} from 'react-router-dom';\n\nexport default function ScrollToTop() {\n  const {pathname} = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n","import Navbar from './components/navbar';\nimport ScrollToTop from './utils/ScrollToTop';\n\nimport React, {Suspense, lazy} from 'react';\nimport {Helmet} from 'react-helmet';\nimport {useTranslation} from 'react-i18next';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from 'react-router-dom';\nimport {useLocalStorage, useEffectOnce} from 'react-use';\nimport './App.scss';\n\nconst Home = lazy(() =>\n  import('./components/home' /* webpackChunkName: \"Home\" */)\n);\nconst DeepDive = lazy(() =>\n  import('./components/deepdive' /* webpackChunkName: \"DeepDive\" */)\n);\nconst FAQ = lazy(() =>\n  import('./components/faq' /* webpackChunkName: \"FAQ\" */)\n);\nconst Demographics = lazy(() =>\n  import('./components/demographics' /* webpackChunkName: \"PatientDB\" */)\n);\nconst State = lazy(() =>\n  import('./components/state' /* webpackChunkName: \"State\" */)\n);\nconst Essentials = lazy(() =>\n  import('./components/essentials' /* webpackChunkName: \"Essentials\" */)\n);\n\nconst schemaMarkup = {\n  '@context': 'http://schema.org/',\n  '@type': 'NGO',\n  name: 'Coronavirus Outbreak in India: Latest Map and Case Count',\n  alternateName: 'COVID-19 Tracker',\n  url: 'https://www.covid19india.org/',\n  image: 'https://www.covid19india.org/thumbnail.png',\n};\n\nfunction App() {\n  const {t} = useTranslation();\n\n  const pages = [\n    {\n      pageLink: '/',\n      view: Home,\n      displayName: 'Home',\n      animationDelayForNavbar: 0.2,\n      showInNavbar: true,\n    },\n    {\n      pageLink: '/demographics',\n      view: Demographics,\n      displayName: t('Demographics'),\n      animationDelayForNavbar: 0.3,\n      showInNavbar: true,\n    },\n    {\n      pageLink: '/deepdive',\n      view: DeepDive,\n      displayName: t('Deep Dive'),\n      animationDelayForNavbar: 0.4,\n      showInNavbar: true,\n    },\n    {\n      pageLink: '/essentials',\n      view: Essentials,\n      displayName: t('Essentials'),\n      animationDelayForNavbar: 0.5,\n      showInNavbar: true,\n    },\n    {\n      pageLink: '/about',\n      view: FAQ,\n      displayName: t('About'),\n      animationDelayForNavbar: 0.6,\n      showInNavbar: true,\n    },\n    {\n      pageLink: '/state/:stateCode',\n      view: State,\n      displayName: t('State'),\n      animationDelayForNavbar: 0.7,\n      showInNavbar: false,\n    },\n  ];\n\n  const [darkMode, setDarkMode] = useLocalStorage('darkMode', false);\n  const [isThemeSet] = useLocalStorage('isThemeSet', false);\n\n  useEffectOnce(() => {\n    if (\n      window.matchMedia &&\n      window.matchMedia('(prefers-color-scheme: dark)').matches &&\n      !isThemeSet\n    ) {\n      setDarkMode(true);\n    } else if (\n      window.matchMedia &&\n      !window.matchMedia('(prefers-color-scheme: dark)').matches &&\n      !isThemeSet\n    ) {\n      setDarkMode(false);\n    }\n  });\n\n  React.useEffect(() => {\n    if (darkMode) {\n      document.querySelector('body').classList.add('dark-mode');\n    } else {\n      document.querySelector('body').classList.remove('dark-mode');\n    }\n  }, [darkMode]);\n\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaMarkup)}\n        </script>\n      </Helmet>\n\n      <Router>\n        <ScrollToTop />\n        <Suspense fallback={<div className=\"lazy\"></div>}>\n          <Route\n            render={({location}) => (\n              <React.Fragment>\n                <Navbar\n                  pages={pages}\n                  darkMode={darkMode}\n                  setDarkMode={setDarkMode}\n                />\n                <Switch location={location}>\n                  {pages.map((page, index) => {\n                    return (\n                      <Route\n                        exact\n                        path={page.pageLink}\n                        render={({match}) => (\n                          <page.view key={match.params.stateCode || index} />\n                        )}\n                        key={index}\n                      />\n                    );\n                  })}\n                  <Redirect to=\"/\" />\n                </Switch>\n              </React.Fragment>\n            )}\n          />\n        </Suspense>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import {isDevelopmentOrTest} from '../utils/commonfunctions';\n\nimport i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport {initReactI18next} from 'react-i18next';\n\nconst DEBUG = false;\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    debug: isDevelopmentOrTest() && DEBUG,\n    lng: 'en',\n    fallbackLng: 'en',\n    backend: {\n      loadPath: '/locales/{{lng}}.json',\n      addPath: 'http://localhost:9999/',\n    },\n    saveMissing: isDevelopmentOrTest() && DEBUG,\n    interpolation: {\n      escapeValue: false,\n    },\n  });\n\nexport default i18n;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import App from './App';\nimport './i18n';\nimport * as serviceWorker from './serviceWorker';\n\nimport React, {Suspense} from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <Suspense fallback={''}>\n    <App />\n  </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}